2.8 Recipe Objects with GSON

Let's create an array of Recipe objects from our JSON response in our onSuccess() callback method. Instead of updating our grid of images (which we'll get to later), let's log our recipe names to make sure converting our JSON to Java objects worked.

MainActivity.java
package com.codeschool.tinybytes;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.TextHttpResponseHandler;

import cz.msebera.android.httpclient.Header;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final Integer[] imageList = {
            R.drawable.bread_snack, R.drawable.caprese_skewers,
                R.drawable.cheese_grapes, R.drawable.other_salad,
                R.drawable.ramen, R.drawable.sandwich,
                R.drawable.shrimp_app, R.drawable.spaghetti,
                R.drawable.spinach_salad, R.drawable.sushi,
                R.drawable.taco
        };

        ImageAdapter imageAdapter = new ImageAdapter(this, imageList);

        GridView gridView = (GridView)this.findViewById(R.id.gridView);
        gridView.setAdapter(imageAdapter);

        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                Intent recipeIntent = new Intent(MainActivity.this, RecipeActivity.class);
                String foodName = getResources().getResourceEntryName(imageList[i]);
                recipeIntent.putExtra("food_name", foodName);
                startActivity(recipeIntent);

            }
        });
        
        AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
        asyncHttpClient.get("https://courseware.codeschool.com/super_sweet_android_time/API/TinyBytes.json",
                new TextHttpResponseHandler() {
                    @Override
                    public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
                        Log.e("AsyncHttpClient", responseString);
                    }

                    @Override
                    public void onSuccess(int statusCode, Header[] headers, String responseString) {
                        
                    }
                }
        );
    }
}


1. Create a Gson variable named gson. Assign to it the result of calling create() on a new GsonBuilder() object using the empty constructor.

Answer:
MainActivity.java

2. Next, create an array of Recipe objects called recipes by using the gson object and its fromJson() method. Remember fromJson() takes in the JSON response string and the class name with square brackets for an array.

Answer: 
MainActivity.java

3. Let's log each recipe's name to make sure Gson converted our Recipe array correctly. To do this, create a for each loop over the recipes array with this log statement inside of the loop: Log.d("AsyncHttpClient", recipe.name);.

Answer:
MainActivity.java
