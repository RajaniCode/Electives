5.2 Refactoring MainActivity to Use ImageCursorAdapter

We updated the ImageAdapter to extend CursorAdapter so that it can access the database directly, and we renamed it to ImageCursorAdapter. Now we need to refactor the code in MainActivty to query the database and use the new class.

ImageCursorAdapter.java
package com.codeschool.tinybytes;

import android.content.Context;
import android.database.Cursor;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CursorAdapter;
import android.widget.ImageView;

import com.squareup.picasso.Picasso;


public class ImageCursorAdapter extends CursorAdapter {

    public ImageCursorAdapter(Context context, Cursor cursor) {
        super(context, cursor, false);
    }


    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        ImageView imageView;
        imageView = new ImageView(context);
        imageView.setAdjustViewBounds(true);
        imageView.setPadding(16, 16, 16, 16);

        return imageView;
    }

    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        String imageURL = cursor.getString(cursor.getColumnIndexOrThrow("image"));

        Picasso.with(context).load(imageURL).into((ImageView)view);
    }

    public ImageCursorAdapter(Context context, Recipe[] recipes) {
        super(context, null, false);
    }
}

MainActivity.java
package com.codeschool.tinybytes;

android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;

import com.codeschool.tinybytes.RecipeContract.RecipeEntry;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.TextHttpResponseHandler;

import cz.msebera.android.httpclient.Header;

public class MainActivity extends AppCompatActivity {
    Recipe[] recipes;
    ImageCursorAdapter imageAdapter;
    GridView gridView;
    RecipeDbHelper recipeDbHelper = new RecipeDbHelper(this);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        imageAdapter = new ImageCursorAdapter(this, recipes);

        gridView = (GridView)findViewById(R.id.gridView);
        gridView.setAdapter(imageAdapter);

        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                Intent recipeIntent = new Intent(MainActivity.this, RecipeActivity.class);

                recipeIntent.putExtra("recipe_name", recipes[i].name);
                recipeIntent.putExtra("recipe_image", recipes[i].image);
                recipeIntent.putExtra("recipe_ingredients", recipes[i].ingredients);
                recipeIntent.putExtra("recipe_directions", recipes[i].directions);
                startActivity(recipeIntent);
            }
        });
 AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
        asyncHttpClient.get("https://courseware.codeschool.com/super_sweet_android_time/API/TinyBytes.json",
                new TextHttpResponseHandler() {
                    @Override
                    public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
                        Log.e("AsyncHttpClient", responseString);
                    }

                    @Override
                    public void onSuccess(int statusCode, Header[] headers, String responseString) {
                        Gson gson = new GsonBuilder().create();
                        recipes = gson.fromJson(responseString, Recipe[].class);

                        addRecipesToDatabase();

                        SQLiteDatabase db = recipeDbHelper.getWritableDatabase();
                        Cursor cursor = db.rawQuery("SELECT * FROM recipe", null);
                        imageAdapter.changeCursor(cursor);
                        gridView.setAdapter(imageAdapter);
                    }
                }
        );
    }

    private void addRecipesToDatabase() {
        RecipeDbHelper recipeDbHelper = new RecipeDbHelper(this);
        SQLiteDatabase db = recipeDbHelper.getWritableDatabase();

        if (recipes == null) return;
        else db.delete(RecipeEntry.TABLE_NAME, null, null);

        for (Recipe recipe : recipes){
            ContentValues contentValues = new ContentValues();
            contentValues.put(RecipeEntry.COLUMN_NAME_NAME, recipe.name);
            contentValues.put(RecipeEntry.COLUMN_NAME_IMAGE, recipe.image);
            contentValues.put(RecipeEntry.COLUMN_NAME_INGREDIENTS, recipe.ingredients);
            contentValues.put(RecipeEntry.COLUMN_NAME_DIRECTIONS, recipe.directions);

            db.insert(RecipeEntry.TABLE_NAME, null, contentValues);
        }
    }
}


1. We created a RecipeDbHelper class variable named recipeDbHelper. Use that and the getWritableDatabase() method to get a SQLiteDatabase object and save it into a variable named db.

Answer:
MainActivity.java

2. Use the db object and the rawQuery() method to execute the query "SELECT * FROM recipe". rawQuery() takes in 2 parameters — the query String and null for the second parameter — and returns a Cursor object that we'll name cursor.

Answer: 
MainActivity.java

3. Finally, let's edit the line where we call the ImageCursorAdapter() constructor, and pass cursor as the second parameter instead of the Recipe array recipes.

Answer:
MainActivity.java
