<PUBLIC:COMPONENT URN='Commerce.efText' tagName="eftext" lightweight=true>
	<PUBLIC>
		<EVENT NAME='onError'		ID='evtError'></EVENT><!-- fired when developer error occurs -->
		<EVENT NAME='onRequire'		ID='evtRequired'></EVENT>
		<EVENT NAME='onChange'		ID='evtChange'></EVENT>
		<EVENT NAME='onValid'		ID='evtValid'></EVENT>
		<EVENT NAME='onBrowse'		ID='evtBrowse'></EVENT>
		<EVENT NAME='onBeginChange'	ID='evtBeginChange'></EVENT>

		<METHOD NAME='initialize' />
		<METHOD NAME='focus'		INTERNALNAME='onFocus' />
		<METHOD NAME='resetDefault'	INTERNALNAME='ResetDefault' />
	<!-- UNSUPPORTED: PRIVATE METHODS -->
		<METHOD NAME='resetReadOnly' />

		<PROPERTY NAME='dirty'		GET='bGetDirty'		/>
		<PROPERTY NAME='required'	GET='bGetRequired'	/>
		<PROPERTY NAME='valid'		GET='bGetValid'		/>
		<PROPERTY NAME='disabled'	GET='bGetDisabled'	PUT='SetDisabled' />
		<PROPERTY NAME='readonly'	GET='bGetReadonly'	PUT='SetReadonly' />
		<PROPERTY NAME='value'		GET='sGetData'		PUT='SetData' />
		<PROPERTY NAME='prompt'		GET='sGetPrompt'	PUT='SetPrompt' />
	</PUBLIC>

	<SCRIPT LANGUAGE='VBScript'>
		Option Explicit

		'define all localizable strings
		const L_DefaultError_ErrorMessage	= "validation error in text (cannot contain '<', '>', or '&')"
		const L_DefaultCharmaskShort_Text	= "^[^<>&]*$"
		const L_DefaultCharmaskLong_Text	= "^[^<>&]*$"
		const L_DefaultTextPrompt_Text		= "enter text"
		const L_MultilingualIcon_ToolTip	= "Multilingual text entry field"
		const L_ValidationError_ErrorMessage = "Validation error"
		const L_PickerButtonWidth_Number = 16	'width in pixels of arrow/ellipsis buttons

		dim m_bDirty, m_bDebug, m_bBrowseReadonly, m_bBrowse, m_bDisabled, m_bValid, _
			m_bReadonly, m_bFieldRequired, m_bRequired, m_bMasterReadOnly, m_bSuppressErrors, _
			m_fnOnError, m_fnOnBrowse, m_fnOnChange, m_fnOnRequire, m_fnOnValid, m_bLoading, _
			m_elInput, m_elBrowseBtn, m_elPrompt, m_nMinlength, m_nMaxlength, m_sDefault, _
			m_sSubtype, m_sType, m_sError, m_sCharmask, m_sPrompt, m_oRegEx, m_sValue, _
			m_bOnChange, m_bShowingInvalid, m_bMultiLing

		'button name constants (webdings)
		const ELLIPSIS = "&hellip;"
		'keycode constants
		const KEYCODE_ESC		= 27
		const KEYCODE_ENTER		= 13
		const KEYCODE_DELETE	= 46
		const KEYCODE_BACKSPACE	= 8

		' when true all developer errors will display in an alert
		m_bDebug = false

		m_bDirty = false			'true if control's value has changed
		m_bRequired = true			'true if marked required and currently empty
		m_bValid = false			'true if value is valid
		m_bSuppressErrors = false	'true supresses validation alert
		set m_elBrowseBtn = nothing	'holds browse button, if any
		m_bLoading = true
		m_bOnChange = false
		m_bShowingInvalid = false

		sub Initialize(xmlNode, sValue)
			'if not in debug mode then hide errors
			if not m_bDebug then on error resume next

			dim elTemp, xmlTemp, sTemp, elTable, elRow, elCell, elImg

			m_sType = "text"
			m_sSubtype = xmlNode.getAttribute("subtype")
			if isNull(m_sSubtype) then m_sSubtype = "short"
			if m_sSubtype = "password" then
				m_sType = "password"
				m_sSubtype = "short"
			else
				m_sType = "text"
			end if

			element.innerText = ""
			element.attachEvent "onkeydown", GetRef("onKeyDown")

			'get event handler function names
			m_fnOnBrowse = xmlNode.getAttribute("onbrowse")
			m_fnOnChange = xmlNode.getAttribute("onchange")
			m_fnOnRequire = xmlNode.getAttribute("onrequire")
			m_fnOnValid = xmlNode.getAttribute("onvalid")
			m_fnOnError = xmlNode.getAttribute("onerror")
			'check if browse enabled
			sTemp = xmlNode.getAttribute("browse")
			m_bBrowse = CBool(not isNull(m_fnOnBrowse) or (not isNull(sTemp) and LCase(sTemp) = "yes"))
			sTemp = xmlNode.getAttribute("multilingual")
			m_bMultiLing = CBool(not isNull(sTemp) and LCase(sTemp) = "yes")
			sTemp = xmlNode.getAttribute("browsereadonly")
			m_bBrowseReadonly = CBool(not isNull(sTemp) and LCase(sTemp) = "yes")
			'get prompt text
			set xmlTemp = xmlNode.selectSingleNode("prompt")
			if not xmlTemp is nothing then
				m_sPrompt = xmlTemp.text
			else
				m_sPrompt = L_DefaultTextPrompt_Text
			end if

			m_sDefault = xmlNode.getAttribute("default")
			if sValue = "" and not isNull(m_sDefault) then sValue = m_sDefault
			sValue = trim(replace(sValue, "&amp;", "&"))
			sValue = trim(replace(sValue, "&#13;", vbCR))
			m_sValue = sValue

			if m_sType <> "password" then
				element.title = Left(sValue, 256)
			end if

			' get min and maxlength and set to zero if missing or illegal (zero means ignore)
			m_nMaxlength = xmlNode.getAttribute("maxlen")
			if isNull(m_nMaxlength) or m_nMaxlength = "" then
				m_nMaxlength = 0
			elseif not isNumeric(m_nMaxlength) or m_nMaxlength <= 0 then
				m_nMaxlength = 0
			else
				m_nMaxlength = CInt(m_nMaxlength)
			end if
			m_nMinlength = xmlNode.getAttribute("minlen")
			if isNull(m_nMinlength) or m_nMinlength = "" then
				m_nMinlength = 0
			elseif not isNumeric(m_nMinlength) or m_nMinlength <= 0 then
				m_nMinlength = 0
			else
				m_nMinlength = CInt(m_nMinlength)
			end if

			'create multilingual icon
			if m_bMultiLing then
				set elImg = element.insertAdjacentElement("afterEnd", element.document.createElement("IMG"))
				elImg.src = "/widgets/images/world.gif"
				elImg.title = L_MultilingualIcon_ToolTip
				elImg.align = "absmiddle"
				elImg.style.position = "absolute"
				elImg.style.marginTop = "1px"
				elImg.style.marginLeft = "-17px"
				element.style.marginRight = "18px"
			end if

			'create container table
			set elTable = element.appendChild(element.document.createElement("TABLE"))
			with elTable
				.style.tableLayout = "fixed"
				.width = "100%"
				.cellSpacing = 0
				.cellPadding = 0
			end with
			set elRow = elTable.insertRow()
			set elCell = elRow.insertCell()
			elCell.style.padding = 0
			elCell.vAlign = "top"
			if m_sSubtype = "short" then
				'create input for displaying value
				set m_elInput = element.document.createElement("INPUT")
				m_elInput.type = m_sType
				set m_elInput = elCell.appendChild(m_elInput)
				with m_elInput
					.value = sValue
					if m_nMaxlength > 0 then .maxLength = m_nMaxlength
				end with
			else
				'create textarea for displaying value
				set m_elInput = elCell.appendChild(element.document.createElement("TEXTAREA"))
				with m_elInput
					.rows = 4
					.innerText = sValue
					.attachEvent "onpaste", GetRef("onPaste")
				end with
			end if
			with m_elInput
				.id = "prop_" & element.id
				.name = element.id
				.className = "efBorderless"
				if sValue = "" then .style.display = "none"
				.attachEvent "onpropertychange", GetRef("onValueChange")
				.attachEvent "onchange", GetRef("onChange")
				.attachEvent "onkeypress", GetRef("onKeyPress")
				.attachEvent "onblur", GetRef("onBlur")
			end with
			'create span for displaying prompt
			set m_elPrompt = elCell.appendChild(element.document.createElement("DIV"))
			with m_elPrompt
				.id = "prompt_" & element.id
				.innerText = m_sPrompt
				.title = m_sPrompt
				if sValue <> "" then .style.display = "none"
				.className = "efPrompt efBorderless"
				.nowrap = true
				.tabindex = 0
				.attachEvent "onfocus", GetRef("onClickPrompt")
				.attachEvent "onclick", GetRef("onClickPrompt")
				element.attachEvent "onfocus", GetRef("onClickPrompt")
				element.attachEvent "onclick", GetRef("onClickPrompt")
			end with

			if m_bBrowse then
				'if browsable then add browse button and attach browse event
				set elCell = elRow.insertCell()
				elCell.width = L_PickerButtonWidth_Number
				elCell.style.padding = 0
				set m_elBrowseBtn = elCell.appendChild(element.document.createElement("BUTTON"))
				with m_elBrowseBtn
					.id = "browse_" & element.id
					if not m_bBrowseReadonly then .disabled = true
					.attachEvent "onclick", GetRef("onBrowseClick")
					.className = "efEllipsisBtn"
					.innerHTML = ELLIPSIS
					.attachEvent "onkeydown", GetRef("onBrowseKeyDown")
					set xmlTemp = xmlNode.selectSingleNode("browsetooltip")
					if not xmlTemp is nothing then .title = xmlTemp.text
				end with
				if not isNull(m_fnOnBrowse) then element.attachEvent "onbrowse", GetRef("CallBrowseHandler")
			end if

			'get validation error msg and charmask
			if not xmlNode.selectSingleNode("error") is nothing then m_sError = xmlNode.selectSingleNode("error").text
			if m_sError = "" then m_sError = L_DefaultError_ErrorMessage
			if not xmlNode.selectSingleNode("charmask") is nothing then m_sCharmask = xmlNode.selectSingleNode("charmask").text
			if m_sCharmask = "" then
				if m_sSubtype = "short" then
					m_sCharmask = L_DefaultCharmaskShort_Text
				else
					m_sCharmask = L_DefaultCharmaskLong_Text
				end if
			end if

			set m_oRegEx = New RegExp
			m_oRegEx.Pattern = m_sCharmask
			m_oRegEx.IgnoreCase = true
			m_oRegEx.Global = false

			'get required, readonly, disabled
			sTemp = xmlNode.getAttribute("required")
			m_bFieldRequired = CBool((not isNull(sTemp) and LCase(sTemp) = "yes") or _
								m_nMinlength > 0)	'treat as required if minlength used
			sTemp = xmlNode.getAttribute("readonly")
			m_bMasterReadOnly = CBool(m_bBrowseReadonly or (not isNull(sTemp) and LCase(sTemp) = "yes"))
			readonly = m_bMasterReadOnly
			sTemp = xmlNode.getAttribute("disabled")
			disabled = CBool(not isNull(sTemp) and LCase(sTemp) = "yes")
			'attach event handlers
			if not isNull(m_fnOnChange) then element.attachEvent "onchange", GetRef("CallChangeHandler")
			if not isNull(m_fnOnRequire) then element.attachEvent "onrequire", GetRef("CallRequireHandler")
			if not isNull(m_fnOnValid) then element.attachEvent "onvalid", GetRef("CallValidHandler")
			if not isNull(m_fnOnError) then element.attachEvent "onerror", GetRef("CallErrorHandler")
			'fire events and show invalid
			SetRequired(sValue)
			SetValid(sValue)
			ShowInvalid()
			m_bLoading = false
		end sub

		sub onBrowseKeyDown()
			dim evt
			set evt = window.event
			if not m_bDisabled then
				if evt.keyCode = KEYCODE_ENTER then
					'enter same as click item
					onBrowseClick()
					evt.returnValue = false
				end if
			end if
		end sub

		sub onBrowseClick()
			dim evt
			if not m_bDisabled then
				'fire browse event
				set evt = createEventObject()
				if m_sSubtype = "short" then
					evt.setAttribute "value", m_elInput.value
				else
					evt.setAttribute "value", m_elInput.innerText
				end if
				evt.setAttribute "type", "browse"
				evtBrowse.fire(evt)
			end if
		end sub

		sub CallBrowseHandler()
			if window.event.type <> "browse" then exit sub
			on error resume next
			execute("call window." & m_fnOnBrowse)
			on error goto 0
		end sub

		sub CallChangeHandler()
			on error resume next
			execute("call window." & m_fnOnChange)
			on error goto 0
		end sub

		sub CallRequireHandler()
			on error resume next
			execute("call window." & m_fnOnRequire)
			on error goto 0
		end sub

		sub CallValidHandler()
			on error resume next
			execute("call window." & m_fnOnValid)
			on error goto 0
		end sub

		sub CallErrorHandler()
			on error resume next
			execute("call window." & m_fnOnError)
			on error goto 0
		end sub

		sub sGetPrompt(sPrompt)
			sGetPrompt = m_sPrompt
		end sub

		sub SetPrompt(sPrompt)
			m_sPrompt = sPrompt
		end sub

		sub ShowPrompt()
			dim nWidth
			if m_sValue = "" and not (m_bReadonly or m_bDisabled) and _
				m_elPrompt.style.display = "none" then
				nWidth = m_elInput.style.pixelWidth
				m_elPrompt.style.display = "inline"
				if nWidth > 0 then m_elPrompt.style.width = nWidth
				m_elInput.style.display = "none"
				ShowInvalid()
			end if
		end sub

		sub HidePrompt()
			if m_elPrompt.style.display <> "none" then
				m_elPrompt.style.display = "none"
				m_elInput.style.display = "inline"
			end if
		end sub

		sub onPaste()
			dim tr, sText
			set tr = element.document.selection.createRange()
			sText = window.clipboardData.getData("text")
			if m_nMaxlength > 0 and len(m_elInput.value) - len(tr.text) + len(sText) > m_nMaxlength then
				window.event.returnValue = false
				tr.text = left(sText, abs(m_nMaxlength - len(m_elInput.value) - len(tr.text)))
			end if
		end sub

		sub onClickPrompt()
			HidePrompt()
			focus()
		end sub

		function bGetDisabled()
			bGetDisabled = m_bDisabled
		end function

		sub SetDisabled(bDisabled)
			m_bDisabled = bDisabled
			if not (m_bReadonly or m_bBrowseReadonly) then
				m_elInput.readonly = m_bDisabled
				if m_bDisabled then
					element.style.cursor = "default"
					m_elInput.style.cursor = "default"
					m_elInput.tabIndex = -1
				else
					element.style.cursor = ""
					m_elInput.style.cursor = ""
					m_elInput.tabIndex = 0
				end if
			end if
			if m_bDisabled then
				SetRequired("__")
				element.className = element.className & " efDisabled"
				if m_bBrowse then
					m_elBrowseBtn.tabIndex = -1
					m_elBrowseBtn.disabled = bDisabled
					if m_bBrowseReadonly then m_elBrowseBtn.style.display = "none"
				end if
			else
				if m_bFieldRequired then SetRequired(m_sValue)
				m_bDirty = false
				m_bValid = true
				element.className = replace(element.className, " efDisabled", "")
				if m_bBrowse then
					m_elBrowseBtn.tabIndex = 0
					m_elBrowseBtn.disabled = bDisabled
					if m_bBrowseReadonly then m_elBrowseBtn.style.display = "block"
				end if
			end if
			if m_bReadonly or m_bDisabled then
				HidePrompt()
			else
				ShowPrompt()
			end if
		end sub

		function bGetReadonly()
			bGetReadonly = m_bReadOnly
		end function

		sub SetReadonly(bReadOnly)
			m_bReadOnly = bReadOnly
			m_elInput.readOnly = m_bReadOnly
			if m_bReadOnly then
				if inStr(element.className, "efRead") then
					if m_bBrowseReadOnly then
						element.className = replace(element.className, "efReadWrite", "efBrowseReadOnly")
					else
						element.className = replace(element.className, "efReadWrite", "efReadOnly")
					end if
				else
					if m_bBrowseReadOnly then
						element.className = element.className & " efBrowseReadOnly"
					else
						element.className = element.className & " efReadOnly"
					end if
				end if
				m_elInput.style.cursor = "default"
				m_elInput.tabIndex = -1
				if m_bBrowse and not m_bBrowseReadonly then
					m_elBrowseBtn.style.display = "none"
					m_elBrowseBtn.tabIndex = -1
				end if
			else
				m_bDirty = false
				m_bValid = true
				if inStr(element.className, "efRead") then
					element.className = replace(element.className, "efReadOnly", "efReadWrite")
					element.className = replace(element.className, "efBrowseReadOnly", "efReadWrite")
				else
					element.className = element.className & " efReadWrite"
				end if
				m_elInput.style.cursor = ""
				m_elInput.tabIndex = 0
				if m_bBrowse and not m_bBrowseReadonly then
					m_elBrowseBtn.style.display = ""
					m_elBrowseBtn.tabIndex = 0
				end if
			end if
			if m_bBrowse and not m_bBrowseReadonly then m_elBrowseBtn.disabled = bReadonly
			if m_bReadonly or m_bDisabled then
				HidePrompt()
			else
				ShowPrompt()
			end if
		end sub

		sub ResetReadOnly()
			SetReadonly(m_bMasterReadOnly)
		end sub

		function sGetData()
			sGetData = ""
			if m_sSubtype = "short" then
				if not isEmpty(m_elInput) then sGetData = m_elInput.value
			else
				if not isEmpty(m_elInput) then sGetData = m_elInput.innerText
			end if
		end function

		sub ResetDefault()
			'reset to default or empty
			if not isNull(m_sDefault) then
				SetData(m_sDefault)
			else
				SetData("")
			end if
			m_bDirty = false
		end sub

		sub SetData(sValue)
			if trim(sValue) = m_sValue then exit sub
			m_bOnChange = false
			sValue = replace(sValue, "&#13;", vbCR)
			UpdateControl(sValue)
			HidePrompt()
			ShowPrompt()
		end sub

		sub UpdateControl(sValue)
			dim evt
			if m_bOnChange then exit sub
			m_bOnChange = true
			m_sValue = sValue
			if m_sType <> "password" then
				m_sValue = trim(sValue)
				element.title = Left(m_sValue, 256)
			end if
			if m_sSubtype = "short" then
				m_elInput.value = m_sValue
			else
				m_elInput.innerText = m_sValue
			end if
			m_bOnChange = false
			if not (m_bReadonly and not m_bBrowseReadonly) then
				'show invalid
				SetRequired(m_sValue)
				SetValid(m_sValue)
				ShowInvalid()
				if not m_bValid and not m_bSuppressErrors and _
					not (element.style.display = "none" or _
					element.parentElement.style.display = "none") then
					msgbox m_sError, vbOKOnly, L_ValidationError_ErrorMessage
					m_bSuppressErrors = true
				end if
			end if
			if not m_bDisabled then
				set evt = createEventObject()
				evt.setAttribute "type", "change"
				evtChange.fire(evt)
				m_bDirty = true
			end if
		end sub

		sub SetRequired(sValue)
			dim bRequired, evt
			bRequired = cBool(m_bFieldRequired and trim(sValue) = "")
			if m_bRequired <> bRequired or m_bLoading then
				m_bRequired = bRequired
				if element.style.display = "none" or _
					element.parentElement.style.display = "none" then exit sub
				set evt = createEventObject()
				evt.setAttribute "required", m_bRequired
				evt.setAttribute "type", "require"
				evtRequired.fire(evt)
			end if
		end sub

		function bGetRequired()
			bGetRequired = m_bRequired
		end function

		function bGetDirty()
			bGetDirty = m_bDirty
		end function

		function bGetValid()
			bGetValid = m_bValid
		end function

		sub SetValid(sValue)
			dim bValid, sMatch, oMatches, evt

			bValid = true
			if sValue <> "" and not m_bDisabled then
				sMatch = ""
				set oMatches = m_oRegEx.execute(sValue)
				if oMatches.count = 1 then
					sMatch = oMatches.item(0)
					if (sMatch = sValue and _
						(isNull(m_nMaxlength) or m_nMaxlength = 0 or _
						Len(sValue) <= m_nMaxlength) and _
						(isNull(m_nMinlength) or m_nMinlength = 0 or _
						Len(sValue) >= m_nMinlength)) then
						bValid = true
					else
						bValid = false
					end if
				else
					bValid = false
				end if
			end if
			if m_bValid <> bValid or m_bLoading then
				m_bValid = bValid
				if element.style.display = "none" or _
					element.parentElement.style.display = "none" then exit sub
				set evt = createEventObject()
				evt.setAttribute "valid", m_bValid
				evt.setAttribute "type", "valid"
				evtValid.fire(evt)
			end if
		end sub

		sub ShowInvalid()
 			dim bInvalid
 			bInvalid = cBool(not m_bValid or m_bRequired)
 			if not bInvalid and m_bShowingInvalid then
				m_bShowingInvalid = false
				element.className = replace(element.className, " efInvalid", "")
				m_bSuppressErrors = false
			elseif bInvalid and not m_bShowingInvalid then
				m_bShowingInvalid = true
				element.className = element.className & " efInvalid"
			end if
 		end sub

		sub onKeyDown()
			dim evt
			set evt = window.event
			if (m_sSubtype = "short" and evt.keyCode = KEYCODE_ENTER) or _
				evt.keyCode = KEYCODE_ESC then
				evt.returnValue = false
				evt.cancelBubble = true
			elseif not evt.altKey then
				window.setTimeout GetRef("fireBeginChange"), 1
			end if
		end sub

		sub onKeyPress()
			if m_bReadOnly or m_bDisabled then exit sub
			if m_sSubtype = "long" and (not isNull(m_nMaxlength) and m_nMaxlength > 0 and _
				Len(m_elInput.innerText) >= m_nMaxlength) then
				window.event.returnValue = false
			end if
		end sub

		sub fireBeginChange()
			dim evt
			if m_elInput.value <> m_sValue then
				m_bDirty = true
				set evt = createEventObject()
				evt.setAttribute "type", "beginchange"
				evtBeginChange.fire(evt)
			end if
		end sub

		sub onValueChange()
			dim sValue
			if window.event.propertyName = "value" and not m_bOnChange then
				m_bOnChange = true
				if m_sSubtype = "short" then
					sValue = m_elInput.value
				else
					sValue = m_elInput.innerText
				end if
				if m_sType <> "password" then
					element.title = Left(trim(sValue), 256)
				end if
				m_bDirty = true
				SetRequired(sValue)
				SetValid(sValue)
				ShowInvalid()
				m_bOnChange = false
			end if
		end sub

		sub onFocus()
			if m_elInput.style.display = "none" then HidePrompt()
			on error resume next
			if not m_elInput.readonly and m_elInput.style.display <> "none" then
				m_elInput.focus()
			elseif (m_bDisabled or m_bReadonly) and m_bBrowse then
				if not m_elBrowseBtn.disabled then m_elBrowseBtn.focus()
			end if
		end sub

		sub onChange()
			dim sValue, evt
			if m_bDisabled or m_bReadonly or m_bOnChange then exit sub
			if m_sSubtype = "short" then
				sValue = m_elInput.value
			else
				sValue = replace(m_elInput.innerText, vbCRLF, vbLF)
			end if
			if trim(sValue) <> m_sValue then UpdateControl(sValue)
		end sub

		sub onBlur()
			onChange()
			ShowPrompt()
		end sub
	</SCRIPT>
</PUBLIC:COMPONENT>