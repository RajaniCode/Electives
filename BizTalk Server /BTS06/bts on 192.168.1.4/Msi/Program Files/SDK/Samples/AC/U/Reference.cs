//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.44.
// 
namespace Microsoft.Samples.BizTalk.UtilObjects.HwsWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HwsServiceSoap", Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class HwsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetNewActivityFlowIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityModelParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionTargetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityModelTargetListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckConstraintOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActionToActivityFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddActivationBlockToActivityFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIgnoreActivityFlowOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterruptActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActivityFlowInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllActivityFlowsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActionInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTasksForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTaskResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCacheOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HwsService() {
            this.Url = Microsoft.Samples.BizTalk.UtilObjects.Properties.Settings.Default.UtilObjects_HwsWebService_HwsService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetNewActivityFlowIDCompletedEventHandler GetNewActivityFlowIDCompleted;
        
        /// <remarks/>
        public event GetActivityListCompletedEventHandler GetActivityListCompleted;
        
        /// <remarks/>
        public event GetActionParametersCompletedEventHandler GetActionParametersCompleted;
        
        /// <remarks/>
        public event GetActivityModelParametersCompletedEventHandler GetActivityModelParametersCompleted;
        
        /// <remarks/>
        public event GetActionTargetListCompletedEventHandler GetActionTargetListCompleted;
        
        /// <remarks/>
        public event GetActivityModelTargetListsCompletedEventHandler GetActivityModelTargetListsCompleted;
        
        /// <remarks/>
        public event CheckConstraintCompletedEventHandler CheckConstraintCompleted;
        
        /// <remarks/>
        public event AddActionToActivityFlowCompletedEventHandler AddActionToActivityFlowCompleted;
        
        /// <remarks/>
        public event AddActivationBlockToActivityFlowCompletedEventHandler AddActivationBlockToActivityFlowCompleted;
        
        /// <remarks/>
        public event SetIgnoreActivityFlowCompletedEventHandler SetIgnoreActivityFlowCompleted;
        
        /// <remarks/>
        public event InterruptActionCompletedEventHandler InterruptActionCompleted;
        
        /// <remarks/>
        public event GetActivityFlowInfoCompletedEventHandler GetActivityFlowInfoCompleted;
        
        /// <remarks/>
        public event GetAllActivityFlowsForUserCompletedEventHandler GetAllActivityFlowsForUserCompleted;
        
        /// <remarks/>
        public event GetActionInstanceCompletedEventHandler GetActionInstanceCompleted;
        
        /// <remarks/>
        public event GetTaskInfoCompletedEventHandler GetTaskInfoCompleted;
        
        /// <remarks/>
        public event GetAllTasksForUserCompletedEventHandler GetAllTasksForUserCompleted;
        
        /// <remarks/>
        public event GetTaskMessageCompletedEventHandler GetTaskMessageCompleted;
        
        /// <remarks/>
        public event SendTaskResponseCompletedEventHandler SendTaskResponseCompleted;
        
        /// <remarks/>
        public event UpdateCacheCompletedEventHandler UpdateCacheCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetNewActivityFlowID", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("NewActivityFlowID")]
        public System.Guid GetNewActivityFlowID() {
            object[] results = this.Invoke("GetNewActivityFlowID", new object[0]);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNewActivityFlowID(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNewActivityFlowID", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndGetNewActivityFlowID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewActivityFlowIDAsync() {
            this.GetNewActivityFlowIDAsync(null);
        }
        
        /// <remarks/>
        public void GetNewActivityFlowIDAsync(object userState) {
            if ((this.GetNewActivityFlowIDOperationCompleted == null)) {
                this.GetNewActivityFlowIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewActivityFlowIDOperationCompleted);
            }
            this.InvokeAsync("GetNewActivityFlowID", new object[0], this.GetNewActivityFlowIDOperationCompleted, userState);
        }
        
        private void OnGetNewActivityFlowIDOperationCompleted(object arg) {
            if ((this.GetNewActivityFlowIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewActivityFlowIDCompleted(this, new GetNewActivityFlowIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityList", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecutableActions")]
        public Activity[] GetActivityList(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser) {
            object[] results = this.Invoke("GetActivityList", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        target,
                        actingUser});
            return ((Activity[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityList(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityList", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        target,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Activity[] EndGetActivityList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Activity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityListAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser) {
            this.GetActivityListAsync(activityFlowID, parentActionInstanceID, parentTaskID, target, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActivityListAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser, object userState) {
            if ((this.GetActivityListOperationCompleted == null)) {
                this.GetActivityListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityListOperationCompleted);
            }
            this.InvokeAsync("GetActivityList", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        target,
                        actingUser}, this.GetActivityListOperationCompleted, userState);
        }
        
        private void OnGetActivityListOperationCompleted(object arg) {
            if ((this.GetActivityListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityListCompleted(this, new GetActivityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionParameters", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionParameters")]
        public ActionParameters GetActionParameters(System.Guid actionTypeID, string actingUser) {
            object[] results = this.Invoke("GetActionParameters", new object[] {
                        actionTypeID,
                        actingUser});
            return ((ActionParameters)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionParameters(System.Guid actionTypeID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionParameters", new object[] {
                        actionTypeID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionParameters EndGetActionParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionParameters)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionParametersAsync(System.Guid actionTypeID, string actingUser) {
            this.GetActionParametersAsync(actionTypeID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActionParametersAsync(System.Guid actionTypeID, string actingUser, object userState) {
            if ((this.GetActionParametersOperationCompleted == null)) {
                this.GetActionParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionParametersOperationCompleted);
            }
            this.InvokeAsync("GetActionParameters", new object[] {
                        actionTypeID,
                        actingUser}, this.GetActionParametersOperationCompleted, userState);
        }
        
        private void OnGetActionParametersOperationCompleted(object arg) {
            if ((this.GetActionParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionParametersCompleted(this, new GetActionParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityModelParameters", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActivityModelParameters")]
        public ActionParameters[] GetActivityModelParameters(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser) {
            object[] results = this.Invoke("GetActivityModelParameters", new object[] {
                        activityModelTypeID,
                        activationBlockID,
                        actingUser});
            return ((ActionParameters[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityModelParameters(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityModelParameters", new object[] {
                        activityModelTypeID,
                        activationBlockID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionParameters[] EndGetActivityModelParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionParameters[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityModelParametersAsync(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser) {
            this.GetActivityModelParametersAsync(activityModelTypeID, activationBlockID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActivityModelParametersAsync(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser, object userState) {
            if ((this.GetActivityModelParametersOperationCompleted == null)) {
                this.GetActivityModelParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityModelParametersOperationCompleted);
            }
            this.InvokeAsync("GetActivityModelParameters", new object[] {
                        activityModelTypeID,
                        activationBlockID,
                        actingUser}, this.GetActivityModelParametersOperationCompleted, userState);
        }
        
        private void OnGetActivityModelParametersOperationCompleted(object arg) {
            if ((this.GetActivityModelParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityModelParametersCompleted(this, new GetActivityModelParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionTargetList", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TargetList")]
        public Actors GetActionTargetList(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            object[] results = this.Invoke("GetActionTargetList", new object[] {
                        activityFlowID,
                        actionTypeID,
                        activityModelTypeID,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser});
            return ((Actors)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionTargetList(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionTargetList", new object[] {
                        activityFlowID,
                        actionTypeID,
                        activityModelTypeID,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Actors EndGetActionTargetList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Actors)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionTargetListAsync(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            this.GetActionTargetListAsync(activityFlowID, actionTypeID, activityModelTypeID, parentActionInstanceID, parentTaskID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActionTargetListAsync(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, object userState) {
            if ((this.GetActionTargetListOperationCompleted == null)) {
                this.GetActionTargetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionTargetListOperationCompleted);
            }
            this.InvokeAsync("GetActionTargetList", new object[] {
                        activityFlowID,
                        actionTypeID,
                        activityModelTypeID,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, this.GetActionTargetListOperationCompleted, userState);
        }
        
        private void OnGetActionTargetListOperationCompleted(object arg) {
            if ((this.GetActionTargetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionTargetListCompleted(this, new GetActionTargetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityModelTargetLists", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TargetLists")]
        public Actors[] GetActivityModelTargetLists(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            object[] results = this.Invoke("GetActivityModelTargetLists", new object[] {
                        activityFlowID,
                        activityModelTypeID,
                        activityModelStepIDs,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser});
            return ((Actors[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityModelTargetLists(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityModelTargetLists", new object[] {
                        activityFlowID,
                        activityModelTypeID,
                        activityModelStepIDs,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Actors[] EndGetActivityModelTargetLists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Actors[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityModelTargetListsAsync(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            this.GetActivityModelTargetListsAsync(activityFlowID, activityModelTypeID, activityModelStepIDs, parentActionInstanceID, parentTaskID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActivityModelTargetListsAsync(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, object userState) {
            if ((this.GetActivityModelTargetListsOperationCompleted == null)) {
                this.GetActivityModelTargetListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityModelTargetListsOperationCompleted);
            }
            this.InvokeAsync("GetActivityModelTargetLists", new object[] {
                        activityFlowID,
                        activityModelTypeID,
                        activityModelStepIDs,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, this.GetActivityModelTargetListsOperationCompleted, userState);
        }
        
        private void OnGetActivityModelTargetListsOperationCompleted(object arg) {
            if ((this.GetActivityModelTargetListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityModelTargetListsCompleted(this, new GetActivityModelTargetListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/CheckConstraint", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckConstraintPass")]
        public bool CheckConstraint(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            object[] results = this.Invoke("CheckConstraint", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckConstraint(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckConstraint", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckConstraint(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckConstraintAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            this.CheckConstraintAsync(activityFlowID, parentActionInstanceID, parentTaskID, isDependentComposition, actionParameters, actingUser, null);
        }
        
        /// <remarks/>
        public void CheckConstraintAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, object userState) {
            if ((this.CheckConstraintOperationCompleted == null)) {
                this.CheckConstraintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckConstraintOperationCompleted);
            }
            this.InvokeAsync("CheckConstraint", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, this.CheckConstraintOperationCompleted, userState);
        }
        
        private void OnCheckConstraintOperationCompleted(object arg) {
            if ((this.CheckConstraintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckConstraintCompleted(this, new CheckConstraintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/AddActionToActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionInstanceID")]
        public System.Guid AddActionToActivityFlow(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            object[] results = this.Invoke("AddActionToActivityFlow", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddActionToActivityFlow(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddActionToActivityFlow", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndAddActionToActivityFlow(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void AddActionToActivityFlowAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            this.AddActionToActivityFlowAsync(activityFlowID, parentActionInstanceID, parentTaskID, isDependentComposition, actionParameters, actingUser, null);
        }
        
        /// <remarks/>
        public void AddActionToActivityFlowAsync(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, object userState) {
            if ((this.AddActionToActivityFlowOperationCompleted == null)) {
                this.AddActionToActivityFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActionToActivityFlowOperationCompleted);
            }
            this.InvokeAsync("AddActionToActivityFlow", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, this.AddActionToActivityFlowOperationCompleted, userState);
        }
        
        private void OnAddActionToActivityFlowOperationCompleted(object arg) {
            if ((this.AddActionToActivityFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActionToActivityFlowCompleted(this, new AddActionToActivityFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/AddActivationBlockToActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentActivityModelInstanceID")]
        public System.Guid AddActivationBlockToActivityFlow(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser) {
            object[] results = this.Invoke("AddActivationBlockToActivityFlow", new object[] {
                        activityFlowID,
                        activityModelInstanceID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        activationBlockParameters,
                        actingUser});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddActivationBlockToActivityFlow(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddActivationBlockToActivityFlow", new object[] {
                        activityFlowID,
                        activityModelInstanceID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        activationBlockParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndAddActivationBlockToActivityFlow(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void AddActivationBlockToActivityFlowAsync(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser) {
            this.AddActivationBlockToActivityFlowAsync(activityFlowID, activityModelInstanceID, parentActionInstanceID, parentTaskID, isDependentComposition, activationBlockParameters, actingUser, null);
        }
        
        /// <remarks/>
        public void AddActivationBlockToActivityFlowAsync(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser, object userState) {
            if ((this.AddActivationBlockToActivityFlowOperationCompleted == null)) {
                this.AddActivationBlockToActivityFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddActivationBlockToActivityFlowOperationCompleted);
            }
            this.InvokeAsync("AddActivationBlockToActivityFlow", new object[] {
                        activityFlowID,
                        activityModelInstanceID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        activationBlockParameters,
                        actingUser}, this.AddActivationBlockToActivityFlowOperationCompleted, userState);
        }
        
        private void OnAddActivationBlockToActivityFlowOperationCompleted(object arg) {
            if ((this.AddActivationBlockToActivityFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddActivationBlockToActivityFlowCompleted(this, new AddActivationBlockToActivityFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/SetIgnoreActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetIgnoreActivityFlow(System.Guid activityFlowID, bool isIgnore, string actingUserID) {
            this.Invoke("SetIgnoreActivityFlow", new object[] {
                        activityFlowID,
                        isIgnore,
                        actingUserID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetIgnoreActivityFlow(System.Guid activityFlowID, bool isIgnore, string actingUserID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetIgnoreActivityFlow", new object[] {
                        activityFlowID,
                        isIgnore,
                        actingUserID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetIgnoreActivityFlow(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetIgnoreActivityFlowAsync(System.Guid activityFlowID, bool isIgnore, string actingUserID) {
            this.SetIgnoreActivityFlowAsync(activityFlowID, isIgnore, actingUserID, null);
        }
        
        /// <remarks/>
        public void SetIgnoreActivityFlowAsync(System.Guid activityFlowID, bool isIgnore, string actingUserID, object userState) {
            if ((this.SetIgnoreActivityFlowOperationCompleted == null)) {
                this.SetIgnoreActivityFlowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIgnoreActivityFlowOperationCompleted);
            }
            this.InvokeAsync("SetIgnoreActivityFlow", new object[] {
                        activityFlowID,
                        isIgnore,
                        actingUserID}, this.SetIgnoreActivityFlowOperationCompleted, userState);
        }
        
        private void OnSetIgnoreActivityFlowOperationCompleted(object arg) {
            if ((this.SetIgnoreActivityFlowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIgnoreActivityFlowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/InterruptAction", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InterruptAction(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser) {
            this.Invoke("InterruptAction", new object[] {
                        actionInstanceID,
                        interruptLevel,
                        interruptType,
                        actingUser});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInterruptAction(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InterruptAction", new object[] {
                        actionInstanceID,
                        interruptLevel,
                        interruptType,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInterruptAction(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InterruptActionAsync(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser) {
            this.InterruptActionAsync(actionInstanceID, interruptLevel, interruptType, actingUser, null);
        }
        
        /// <remarks/>
        public void InterruptActionAsync(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser, object userState) {
            if ((this.InterruptActionOperationCompleted == null)) {
                this.InterruptActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterruptActionOperationCompleted);
            }
            this.InvokeAsync("InterruptAction", new object[] {
                        actionInstanceID,
                        interruptLevel,
                        interruptType,
                        actingUser}, this.InterruptActionOperationCompleted, userState);
        }
        
        private void OnInterruptActionOperationCompleted(object arg) {
            if ((this.InterruptActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterruptActionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityFlowInfo", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActivityFlowTrackingInfo")]
        public ActivityFlow GetActivityFlowInfo(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser) {
            object[] results = this.Invoke("GetActivityFlowInfo", new object[] {
                        activityFlowID,
                        detailLevel,
                        actingUser});
            return ((ActivityFlow)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityFlowInfo(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityFlowInfo", new object[] {
                        activityFlowID,
                        detailLevel,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActivityFlow EndGetActivityFlowInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActivityFlow)(results[0]));
        }
        
        /// <remarks/>
        public void GetActivityFlowInfoAsync(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser) {
            this.GetActivityFlowInfoAsync(activityFlowID, detailLevel, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActivityFlowInfoAsync(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser, object userState) {
            if ((this.GetActivityFlowInfoOperationCompleted == null)) {
                this.GetActivityFlowInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActivityFlowInfoOperationCompleted);
            }
            this.InvokeAsync("GetActivityFlowInfo", new object[] {
                        activityFlowID,
                        detailLevel,
                        actingUser}, this.GetActivityFlowInfoOperationCompleted, userState);
        }
        
        private void OnGetActivityFlowInfoOperationCompleted(object arg) {
            if ((this.GetActivityFlowInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActivityFlowInfoCompleted(this, new GetActivityFlowInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetAllActivityFlowsForUser", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllActivityFlows")]
        public ActivityFlow[] GetAllActivityFlowsForUser(ActivityFlowFilter activityFlowFilter, string actingUser) {
            object[] results = this.Invoke("GetAllActivityFlowsForUser", new object[] {
                        activityFlowFilter,
                        actingUser});
            return ((ActivityFlow[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllActivityFlowsForUser(ActivityFlowFilter activityFlowFilter, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllActivityFlowsForUser", new object[] {
                        activityFlowFilter,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActivityFlow[] EndGetAllActivityFlowsForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActivityFlow[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllActivityFlowsForUserAsync(ActivityFlowFilter activityFlowFilter, string actingUser) {
            this.GetAllActivityFlowsForUserAsync(activityFlowFilter, actingUser, null);
        }
        
        /// <remarks/>
        public void GetAllActivityFlowsForUserAsync(ActivityFlowFilter activityFlowFilter, string actingUser, object userState) {
            if ((this.GetAllActivityFlowsForUserOperationCompleted == null)) {
                this.GetAllActivityFlowsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllActivityFlowsForUserOperationCompleted);
            }
            this.InvokeAsync("GetAllActivityFlowsForUser", new object[] {
                        activityFlowFilter,
                        actingUser}, this.GetAllActivityFlowsForUserOperationCompleted, userState);
        }
        
        private void OnGetAllActivityFlowsForUserOperationCompleted(object arg) {
            if ((this.GetAllActivityFlowsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllActivityFlowsForUserCompleted(this, new GetAllActivityFlowsForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionInstance", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionInstance")]
        public ActionInstance GetActionInstance(System.Guid actionInstanceID, string actingUser) {
            object[] results = this.Invoke("GetActionInstance", new object[] {
                        actionInstanceID,
                        actingUser});
            return ((ActionInstance)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionInstance(System.Guid actionInstanceID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionInstance", new object[] {
                        actionInstanceID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionInstance EndGetActionInstance(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionInstance)(results[0]));
        }
        
        /// <remarks/>
        public void GetActionInstanceAsync(System.Guid actionInstanceID, string actingUser) {
            this.GetActionInstanceAsync(actionInstanceID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetActionInstanceAsync(System.Guid actionInstanceID, string actingUser, object userState) {
            if ((this.GetActionInstanceOperationCompleted == null)) {
                this.GetActionInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActionInstanceOperationCompleted);
            }
            this.InvokeAsync("GetActionInstance", new object[] {
                        actionInstanceID,
                        actingUser}, this.GetActionInstanceOperationCompleted, userState);
        }
        
        private void OnGetActionInstanceOperationCompleted(object arg) {
            if ((this.GetActionInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActionInstanceCompleted(this, new GetActionInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetTaskInfo", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Task")]
        public Task GetTaskInfo(System.Guid taskID, string actingUser) {
            object[] results = this.Invoke("GetTaskInfo", new object[] {
                        taskID,
                        actingUser});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskInfo(System.Guid taskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskInfo", new object[] {
                        taskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task EndGetTaskInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskInfoAsync(System.Guid taskID, string actingUser) {
            this.GetTaskInfoAsync(taskID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetTaskInfoAsync(System.Guid taskID, string actingUser, object userState) {
            if ((this.GetTaskInfoOperationCompleted == null)) {
                this.GetTaskInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskInfoOperationCompleted);
            }
            this.InvokeAsync("GetTaskInfo", new object[] {
                        taskID,
                        actingUser}, this.GetTaskInfoOperationCompleted, userState);
        }
        
        private void OnGetTaskInfoOperationCompleted(object arg) {
            if ((this.GetTaskInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskInfoCompleted(this, new GetTaskInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetAllTasksForUser", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllTasks")]
        public Task[] GetAllTasksForUser(TaskFilter taskFilter, string actingUser) {
            object[] results = this.Invoke("GetAllTasksForUser", new object[] {
                        taskFilter,
                        actingUser});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllTasksForUser(TaskFilter taskFilter, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllTasksForUser", new object[] {
                        taskFilter,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndGetAllTasksForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTasksForUserAsync(TaskFilter taskFilter, string actingUser) {
            this.GetAllTasksForUserAsync(taskFilter, actingUser, null);
        }
        
        /// <remarks/>
        public void GetAllTasksForUserAsync(TaskFilter taskFilter, string actingUser, object userState) {
            if ((this.GetAllTasksForUserOperationCompleted == null)) {
                this.GetAllTasksForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTasksForUserOperationCompleted);
            }
            this.InvokeAsync("GetAllTasksForUser", new object[] {
                        taskFilter,
                        actingUser}, this.GetAllTasksForUserOperationCompleted, userState);
        }
        
        private void OnGetAllTasksForUserOperationCompleted(object arg) {
            if ((this.GetAllTasksForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTasksForUserCompleted(this, new GetAllTasksForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetTaskMessage", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TaskMessage")]
        public string GetTaskMessage(System.Guid taskID, string actingUser) {
            object[] results = this.Invoke("GetTaskMessage", new object[] {
                        taskID,
                        actingUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskMessage(System.Guid taskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskMessage", new object[] {
                        taskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTaskMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskMessageAsync(System.Guid taskID, string actingUser) {
            this.GetTaskMessageAsync(taskID, actingUser, null);
        }
        
        /// <remarks/>
        public void GetTaskMessageAsync(System.Guid taskID, string actingUser, object userState) {
            if ((this.GetTaskMessageOperationCompleted == null)) {
                this.GetTaskMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskMessageOperationCompleted);
            }
            this.InvokeAsync("GetTaskMessage", new object[] {
                        taskID,
                        actingUser}, this.GetTaskMessageOperationCompleted, userState);
        }
        
        private void OnGetTaskMessageOperationCompleted(object arg) {
            if ((this.GetTaskMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskMessageCompleted(this, new GetTaskMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/SendTaskResponse", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendTaskResponse(string taskResponse, string actingUser) {
            this.Invoke("SendTaskResponse", new object[] {
                        taskResponse,
                        actingUser});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTaskResponse(string taskResponse, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTaskResponse", new object[] {
                        taskResponse,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendTaskResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendTaskResponseAsync(string taskResponse, string actingUser) {
            this.SendTaskResponseAsync(taskResponse, actingUser, null);
        }
        
        /// <remarks/>
        public void SendTaskResponseAsync(string taskResponse, string actingUser, object userState) {
            if ((this.SendTaskResponseOperationCompleted == null)) {
                this.SendTaskResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTaskResponseOperationCompleted);
            }
            this.InvokeAsync("SendTaskResponse", new object[] {
                        taskResponse,
                        actingUser}, this.SendTaskResponseOperationCompleted, userState);
        }
        
        private void OnSendTaskResponseOperationCompleted(object arg) {
            if ((this.SendTaskResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTaskResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/UpdateCache", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCache(UpdateCacheLevel level) {
            this.Invoke("UpdateCache", new object[] {
                        level});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCache(UpdateCacheLevel level, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCache", new object[] {
                        level}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCache(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCacheAsync(UpdateCacheLevel level) {
            this.UpdateCacheAsync(level, null);
        }
        
        /// <remarks/>
        public void UpdateCacheAsync(UpdateCacheLevel level, object userState) {
            if ((this.UpdateCacheOperationCompleted == null)) {
                this.UpdateCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCacheOperationCompleted);
            }
            this.InvokeAsync("UpdateCache", new object[] {
                        level}, this.UpdateCacheOperationCompleted, userState);
        }
        
        private void OnUpdateCacheOperationCompleted(object arg) {
            if ((this.UpdateCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Activity {
        
        /// <remarks/>
        public ActivityType ActivityType;
        
        /// <remarks/>
        public System.Guid ActionTypeID;
        
        /// <remarks/>
        public System.Guid ActivityModelTypeID;
        
        /// <remarks/>
        public System.Guid ActivationBlockID;
        
        /// <remarks/>
        public int ActionIndex;
        
        /// <remarks/>
        public string StepName;
        
        /// <remarks/>
        public string StepDescription;
        
        /// <remarks/>
        public System.Guid PreviousActionTypeID;
        
        /// <remarks/>
        public bool IsDependentComposible;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Description;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityType {
        
        /// <remarks/>
        Action,
        
        /// <remarks/>
        ActivityModel,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class TaskFilter {
        
        /// <remarks/>
        public System.DateTime StartTimeStart;
        
        /// <remarks/>
        public System.DateTime StartTimeEnd;
        
        /// <remarks/>
        public TaskStatus taskStatus;
        
        /// <remarks/>
        public bool UseStatusFilter;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum TaskStatus {
        
        /// <remarks/>
        NotStarted,
        
        /// <remarks/>
        InProgress,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Waiting,
        
        /// <remarks/>
        Deferred,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Tentative,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Interrupted,
        
        /// <remarks/>
        Cancelled,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ActivityFlowFilter {
        
        /// <remarks/>
        public System.DateTime StartTimeStart;
        
        /// <remarks/>
        public System.DateTime StartTimeEnd;
        
        /// <remarks/>
        public ActivityFlowStatus ActivityFlowStatus;
        
        /// <remarks/>
        public bool UseStatusFilter;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityFlowStatus {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        InActive,
        
        /// <remarks/>
        Complete,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Reassignment {
        
        /// <remarks/>
        public System.Guid PreviousTaskID;
        
        /// <remarks/>
        public System.Guid NextTaskID;
        
        /// <remarks/>
        public System.Guid FirstTaskID;
        
        /// <remarks/>
        public System.Guid LastTaskID;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ResourceProperty {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Type;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string Value;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class TaskResponse {
        
        /// <remarks/>
        public System.DateTime ResponseTimeStamp;
        
        /// <remarks/>
        public TaskStatus Status;
        
        /// <remarks/>
        public int PercentageComplete;
        
        /// <remarks/>
        public string Responder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ResponseProperties;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Task {
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public string Target;
        
        /// <remarks/>
        public string TargetXPath;
        
        /// <remarks/>
        public System.Guid TaskID;
        
        /// <remarks/>
        public string TaskDescription;
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public System.Guid ActionInstanceID;
        
        /// <remarks/>
        public System.DateTime TaskTimeStamp;
        
        /// <remarks/>
        public TaskStatus CurrentStatus;
        
        /// <remarks/>
        public int CurrentPercentageComplete;
        
        /// <remarks/>
        public TaskResponse[] Responses;
        
        /// <remarks/>
        public string TargetNamespaceUri;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] TaskProperties;
        
        /// <remarks/>
        public Reassignment Reassignment;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ActionInstance {
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public System.Guid ActionTypeID;
        
        /// <remarks/>
        public System.Guid ActionInstanceID;
        
        /// <remarks/>
        public System.Guid PreviousActionInstanceID;
        
        /// <remarks/>
        public System.Guid PreviousTaskID;
        
        /// <remarks/>
        public System.Guid ActivityModelTypeID;
        
        /// <remarks/>
        public int ActivityModelIndex;
        
        /// <remarks/>
        public System.Guid ActivityModelInstanceID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string ActivityModelName;
        
        /// <remarks/>
        public string ActionInstanceTitle;
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public bool IsDependent;
        
        /// <remarks/>
        public ActionStatus Status;
        
        /// <remarks/>
        public System.DateTime StartTime;
        
        /// <remarks/>
        public System.DateTime EndTime;
        
        /// <remarks/>
        public Task[] Tasks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ActionProperties;
        
        /// <remarks/>
        public ActionInstance[] ChildActionInstances;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActionStatus {
        
        /// <remarks/>
        Start,
        
        /// <remarks/>
        PendingSynchronize,
        
        /// <remarks/>
        Finish,
        
        /// <remarks/>
        Abort,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ActivityFlowStat {
        
        /// <remarks/>
        public ActivityFlowDetailLevel DetailLevel;
        
        /// <remarks/>
        public int ActionInstanceCount;
        
        /// <remarks/>
        public int AdHocActionInstanceCount;
        
        /// <remarks/>
        public int ActivityModelCount;
        
        /// <remarks/>
        public string LastActionName;
        
        /// <remarks/>
        public string LastActionInitiator;
        
        /// <remarks/>
        public string[] LastActionTargets;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityFlowDetailLevel {
        
        /// <remarks/>
        ActivityFlowLevel,
        
        /// <remarks/>
        ActionInstanceLevel,
        
        /// <remarks/>
        TaskLevel,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ActivityFlow {
        
        /// <remarks/>
        public ActivityFlowDetailLevel DetailLevel;
        
        /// <remarks/>
        public ActivityFlowStat StatInfo;
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public string ActivityFlowDescription;
        
        /// <remarks/>
        public ActivityFlowStatus Status;
        
        /// <remarks/>
        public ActionInstance[] RootActionInstances;
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public string[] Owners;
        
        /// <remarks/>
        public bool AllIgnoring;
        
        /// <remarks/>
        public System.DateTime StartTimeStamp;
        
        /// <remarks/>
        public System.DateTime LastModifiedTimeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ActivityFlowProperties;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Actor {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string FriendlyName;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class FactStoreGroup {
        
        /// <remarks/>
        public string ID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public int[] ActorIndices;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ParameterActorGrouping {
        
        /// <remarks/>
        public int[] ActorIndices;
        
        /// <remarks/>
        public FactStoreGroup[] Groups;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Actors {
        
        /// <remarks/>
        public ParameterActorGrouping GlobalActorGroup;
        
        /// <remarks/>
        public Actor[] ActorList;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class Target {
        
        /// <remarks/>
        public string ParameterName;
        
        /// <remarks/>
        public string InstanceXPath;
        
        /// <remarks/>
        public int Min;
        
        /// <remarks/>
        public int Max;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public partial class ActionParameters {
        
        /// <remarks/>
        public Activity Action;
        
        /// <remarks/>
        public string XsdDoc;
        
        /// <remarks/>
        public string[] TaskSchemas;
        
        /// <remarks/>
        public Target[] Targets;
        
        /// <remarks/>
        public string ParametersDoc;
        
        /// <remarks/>
        public string ActionInstanceTitle;
        
        /// <remarks/>
        public bool IsOverridable;
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum InterruptLevel {
        
        /// <remarks/>
        ActionInstance,
        
        /// <remarks/>
        ActivityModelInstance,
        
        /// <remarks/>
        ActivityFlow,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum InterruptType {
        
        /// <remarks/>
        Abort,
        
        /// <remarks/>
        Rollback,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum UpdateCacheLevel {
        
        /// <remarks/>
        UpdateCacheLevel_All,
        
        /// <remarks/>
        UpdateCacheLevel_Actions,
        
        /// <remarks/>
        UpdateCacheLevel_ActivityModels,
        
        /// <remarks/>
        UpdateCacheLevel_Constraints,
    }
    
    /// <remarks/>
    public delegate void GetNewActivityFlowIDCompletedEventHandler(object sender, GetNewActivityFlowIDCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetNewActivityFlowIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewActivityFlowIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActivityListCompletedEventHandler(object sender, GetActivityListCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActivityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Activity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Activity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActionParametersCompletedEventHandler(object sender, GetActionParametersCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActionParameters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActionParameters)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActivityModelParametersCompletedEventHandler(object sender, GetActivityModelParametersCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActivityModelParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityModelParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActionParameters[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActionParameters[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActionTargetListCompletedEventHandler(object sender, GetActionTargetListCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActionTargetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionTargetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Actors Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Actors)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActivityModelTargetListsCompletedEventHandler(object sender, GetActivityModelTargetListsCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActivityModelTargetListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityModelTargetListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Actors[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Actors[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void CheckConstraintCompletedEventHandler(object sender, CheckConstraintCompletedEventArgs e);
    
    /// <remarks/>
    public partial class CheckConstraintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckConstraintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void AddActionToActivityFlowCompletedEventHandler(object sender, AddActionToActivityFlowCompletedEventArgs e);
    
    /// <remarks/>
    public partial class AddActionToActivityFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActionToActivityFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void AddActivationBlockToActivityFlowCompletedEventHandler(object sender, AddActivationBlockToActivityFlowCompletedEventArgs e);
    
    /// <remarks/>
    public partial class AddActivationBlockToActivityFlowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddActivationBlockToActivityFlowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void SetIgnoreActivityFlowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void InterruptActionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void GetActivityFlowInfoCompletedEventHandler(object sender, GetActivityFlowInfoCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActivityFlowInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActivityFlowInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivityFlow Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivityFlow)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetAllActivityFlowsForUserCompletedEventHandler(object sender, GetAllActivityFlowsForUserCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetAllActivityFlowsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllActivityFlowsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivityFlow[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivityFlow[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetActionInstanceCompletedEventHandler(object sender, GetActionInstanceCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetActionInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActionInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActionInstance Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActionInstance)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetTaskInfoCompletedEventHandler(object sender, GetTaskInfoCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetTaskInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetAllTasksForUserCompletedEventHandler(object sender, GetAllTasksForUserCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetAllTasksForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTasksForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Task[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Task[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void GetTaskMessageCompletedEventHandler(object sender, GetTaskMessageCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetTaskMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void SendTaskResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    public delegate void UpdateCacheCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
