//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.915
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.915.
// 
namespace Microsoft.Samples.BizTalk.ActivityModelSample.HWS {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HwsServiceSoap", Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class HwsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public HwsService() {
            this.Url = "http://localhost/HwsService/HwsService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetNewActivityFlowID", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("NewActivityFlowID")]
        public System.Guid GetNewActivityFlowID() {
            object[] results = this.Invoke("GetNewActivityFlowID", new object[0]);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNewActivityFlowID(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNewActivityFlowID", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndGetNewActivityFlowID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityList", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ExecutableActions")]
        public Activity[] GetActivityList(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser) {
            object[] results = this.Invoke("GetActivityList", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        target,
                        actingUser});
            return ((Activity[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityList(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string target, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityList", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        target,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Activity[] EndGetActivityList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Activity[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionParameters", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionParameters")]
        public ActionParameters GetActionParameters(System.Guid actionTypeID, string actingUser) {
            object[] results = this.Invoke("GetActionParameters", new object[] {
                        actionTypeID,
                        actingUser});
            return ((ActionParameters)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionParameters(System.Guid actionTypeID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionParameters", new object[] {
                        actionTypeID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionParameters EndGetActionParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionParameters)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityModelParameters", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActivityModelParameters")]
        public ActionParameters[] GetActivityModelParameters(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser) {
            object[] results = this.Invoke("GetActivityModelParameters", new object[] {
                        activityModelTypeID,
                        activationBlockID,
                        actingUser});
            return ((ActionParameters[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityModelParameters(System.Guid activityModelTypeID, System.Guid activationBlockID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityModelParameters", new object[] {
                        activityModelTypeID,
                        activationBlockID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionParameters[] EndGetActivityModelParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionParameters[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionTargetList", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TargetList")]
        public Actors GetActionTargetList(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            object[] results = this.Invoke("GetActionTargetList", new object[] {
                        activityFlowID,
                        actionTypeID,
                        activityModelTypeID,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser});
            return ((Actors)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionTargetList(System.Guid activityFlowID, System.Guid actionTypeID, System.Guid activityModelTypeID, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionTargetList", new object[] {
                        activityFlowID,
                        actionTypeID,
                        activityModelTypeID,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Actors EndGetActionTargetList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Actors)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityModelTargetLists", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TargetLists")]
        public Actors[] GetActivityModelTargetLists(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser) {
            object[] results = this.Invoke("GetActivityModelTargetLists", new object[] {
                        activityFlowID,
                        activityModelTypeID,
                        activityModelStepIDs,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser});
            return ((Actors[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityModelTargetLists(System.Guid activityFlowID, System.Guid activityModelTypeID, int[] activityModelStepIDs, System.Guid parentActionInstanceID, System.Guid parentTaskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityModelTargetLists", new object[] {
                        activityFlowID,
                        activityModelTypeID,
                        activityModelStepIDs,
                        parentActionInstanceID,
                        parentTaskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Actors[] EndGetActivityModelTargetLists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Actors[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/CheckConstraint", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CheckConstraintPass")]
        public bool CheckConstraint(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            object[] results = this.Invoke("CheckConstraint", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckConstraint(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckConstraint", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckConstraint(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/AddActionToActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionInstanceID")]
        public System.Guid AddActionToActivityFlow(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser) {
            object[] results = this.Invoke("AddActionToActivityFlow", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddActionToActivityFlow(System.Guid activityFlowID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters actionParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddActionToActivityFlow", new object[] {
                        activityFlowID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        actionParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndAddActionToActivityFlow(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/AddActivationBlockToActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CurrentActivityModelInstanceID")]
        public System.Guid AddActivationBlockToActivityFlow(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser) {
            object[] results = this.Invoke("AddActivationBlockToActivityFlow", new object[] {
                        activityFlowID,
                        activityModelInstanceID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        activationBlockParameters,
                        actingUser});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddActivationBlockToActivityFlow(System.Guid activityFlowID, System.Guid activityModelInstanceID, System.Guid parentActionInstanceID, System.Guid parentTaskID, bool isDependentComposition, ActionParameters[] activationBlockParameters, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddActivationBlockToActivityFlow", new object[] {
                        activityFlowID,
                        activityModelInstanceID,
                        parentActionInstanceID,
                        parentTaskID,
                        isDependentComposition,
                        activationBlockParameters,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndAddActivationBlockToActivityFlow(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/SetIgnoreActivityFlow", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetIgnoreActivityFlow(System.Guid activityFlowID, bool isIgnore, string actingUserID) {
            this.Invoke("SetIgnoreActivityFlow", new object[] {
                        activityFlowID,
                        isIgnore,
                        actingUserID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetIgnoreActivityFlow(System.Guid activityFlowID, bool isIgnore, string actingUserID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetIgnoreActivityFlow", new object[] {
                        activityFlowID,
                        isIgnore,
                        actingUserID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetIgnoreActivityFlow(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/InterruptAction", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InterruptAction(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser) {
            this.Invoke("InterruptAction", new object[] {
                        actionInstanceID,
                        interruptLevel,
                        interruptType,
                        actingUser});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInterruptAction(System.Guid actionInstanceID, InterruptLevel interruptLevel, InterruptType interruptType, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InterruptAction", new object[] {
                        actionInstanceID,
                        interruptLevel,
                        interruptType,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInterruptAction(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActivityFlowInfo", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActivityFlowTrackingInfo")]
        public ActivityFlow GetActivityFlowInfo(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser) {
            object[] results = this.Invoke("GetActivityFlowInfo", new object[] {
                        activityFlowID,
                        detailLevel,
                        actingUser});
            return ((ActivityFlow)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActivityFlowInfo(System.Guid activityFlowID, ActivityFlowDetailLevel detailLevel, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActivityFlowInfo", new object[] {
                        activityFlowID,
                        detailLevel,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActivityFlow EndGetActivityFlowInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActivityFlow)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetAllActivityFlowsForUser", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllActivityFlows")]
        public ActivityFlow[] GetAllActivityFlowsForUser(ActivityFlowFilter activityFlowFilter, string actingUser) {
            object[] results = this.Invoke("GetAllActivityFlowsForUser", new object[] {
                        activityFlowFilter,
                        actingUser});
            return ((ActivityFlow[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllActivityFlowsForUser(ActivityFlowFilter activityFlowFilter, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllActivityFlowsForUser", new object[] {
                        activityFlowFilter,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActivityFlow[] EndGetAllActivityFlowsForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActivityFlow[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetActionInstance", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ActionInstance")]
        public ActionInstance GetActionInstance(System.Guid actionInstanceID, string actingUser) {
            object[] results = this.Invoke("GetActionInstance", new object[] {
                        actionInstanceID,
                        actingUser});
            return ((ActionInstance)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActionInstance(System.Guid actionInstanceID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActionInstance", new object[] {
                        actionInstanceID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public ActionInstance EndGetActionInstance(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ActionInstance)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetTaskInfo", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Task")]
        public Task GetTaskInfo(System.Guid taskID, string actingUser) {
            object[] results = this.Invoke("GetTaskInfo", new object[] {
                        taskID,
                        actingUser});
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskInfo(System.Guid taskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskInfo", new object[] {
                        taskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task EndGetTaskInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetAllTasksForUser", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AllTasks")]
        public Task[] GetAllTasksForUser(TaskFilter taskFilter, string actingUser) {
            object[] results = this.Invoke("GetAllTasksForUser", new object[] {
                        taskFilter,
                        actingUser});
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllTasksForUser(TaskFilter taskFilter, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllTasksForUser", new object[] {
                        taskFilter,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public Task[] EndGetAllTasksForUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Task[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/GetTaskMessage", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TaskMessage")]
        public string GetTaskMessage(System.Guid taskID, string actingUser) {
            object[] results = this.Invoke("GetTaskMessage", new object[] {
                        taskID,
                        actingUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskMessage(System.Guid taskID, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskMessage", new object[] {
                        taskID,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTaskMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/SendTaskResponse", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendTaskResponse(string taskResponse, string actingUser) {
            this.Invoke("SendTaskResponse", new object[] {
                        taskResponse,
                        actingUser});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTaskResponse(string taskResponse, string actingUser, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTaskResponse", new object[] {
                        taskResponse,
                        actingUser}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendTaskResponse(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://microsoft.com/Biztalk2004/Hws/Hwsservice/UpdateCache", RequestNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", ResponseNamespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCache(UpdateCacheLevel level) {
            this.Invoke("UpdateCache", new object[] {
                        level});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCache(UpdateCacheLevel level, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCache", new object[] {
                        level}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCache(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Activity {
        
        /// <remarks/>
        public ActivityType ActivityType;
        
        /// <remarks/>
        public System.Guid ActionTypeID;
        
        /// <remarks/>
        public System.Guid ActivityModelTypeID;
        
        /// <remarks/>
        public System.Guid ActivationBlockID;
        
        /// <remarks/>
        public int ActionIndex;
        
        /// <remarks/>
        public string StepName;
        
        /// <remarks/>
        public string StepDescription;
        
        /// <remarks/>
        public System.Guid PreviousActionTypeID;
        
        /// <remarks/>
        public bool IsDependentComposible;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Description;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityType {
        
        /// <remarks/>
        Action,
        
        /// <remarks/>
        ActivityModel,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class TaskFilter {
        
        /// <remarks/>
        public System.DateTime StartTimeStart;
        
        /// <remarks/>
        public System.DateTime StartTimeEnd;
        
        /// <remarks/>
        public TaskStatus taskStatus;
        
        /// <remarks/>
        public bool UseStatusFilter;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum TaskStatus {
        
        /// <remarks/>
        NotStarted,
        
        /// <remarks/>
        InProgress,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Waiting,
        
        /// <remarks/>
        Deferred,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Tentative,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Interrupted,
        
        /// <remarks/>
        Cancelled,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ActivityFlowFilter {
        
        /// <remarks/>
        public System.DateTime StartTimeStart;
        
        /// <remarks/>
        public System.DateTime StartTimeEnd;
        
        /// <remarks/>
        public ActivityFlowStatus ActivityFlowStatus;
        
        /// <remarks/>
        public bool UseStatusFilter;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityFlowStatus {
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        InActive,
        
        /// <remarks/>
        Complete,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Reassignment {
        
        /// <remarks/>
        public System.Guid PreviousTaskID;
        
        /// <remarks/>
        public System.Guid NextTaskID;
        
        /// <remarks/>
        public System.Guid FirstTaskID;
        
        /// <remarks/>
        public System.Guid LastTaskID;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ResourceProperty {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Type;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class TaskResponse {
        
        /// <remarks/>
        public System.DateTime ResponseTimeStamp;
        
        /// <remarks/>
        public TaskStatus Status;
        
        /// <remarks/>
        public int PercentageComplete;
        
        /// <remarks/>
        public string Responder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ResponseProperties;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Task {
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public string Target;
        
        /// <remarks/>
        public string TargetXPath;
        
        /// <remarks/>
        public System.Guid TaskID;
        
        /// <remarks/>
        public string TaskDescription;
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public System.Guid ActionInstanceID;
        
        /// <remarks/>
        public System.DateTime TaskTimeStamp;
        
        /// <remarks/>
        public TaskStatus CurrentStatus;
        
        /// <remarks/>
        public int CurrentPercentageComplete;
        
        /// <remarks/>
        public TaskResponse[] Responses;
        
        /// <remarks/>
        public string TargetNamespaceUri;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] TaskProperties;
        
        /// <remarks/>
        public Reassignment Reassignment;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ActionInstance {
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public System.Guid ActionTypeID;
        
        /// <remarks/>
        public System.Guid ActionInstanceID;
        
        /// <remarks/>
        public System.Guid PreviousActionInstanceID;
        
        /// <remarks/>
        public System.Guid PreviousTaskID;
        
        /// <remarks/>
        public System.Guid ActivityModelTypeID;
        
        /// <remarks/>
        public int ActivityModelIndex;
        
        /// <remarks/>
        public System.Guid ActivityModelInstanceID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string ActivityModelName;
        
        /// <remarks/>
        public string ActionInstanceTitle;
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public bool IsDependent;
        
        /// <remarks/>
        public ActionStatus Status;
        
        /// <remarks/>
        public System.DateTime StartTime;
        
        /// <remarks/>
        public System.DateTime EndTime;
        
        /// <remarks/>
        public Task[] Tasks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ActionProperties;
        
        /// <remarks/>
        public ActionInstance[] ChildActionInstances;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActionStatus {
        
        /// <remarks/>
        Start,
        
        /// <remarks/>
        PendingSynchronize,
        
        /// <remarks/>
        Finish,
        
        /// <remarks/>
        Abort,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ActivityFlowStat {
        
        /// <remarks/>
        public ActivityFlowDetailLevel DetailLevel;
        
        /// <remarks/>
        public int ActionInstanceCount;
        
        /// <remarks/>
        public int AdHocActionInstanceCount;
        
        /// <remarks/>
        public int ActivityModelCount;
        
        /// <remarks/>
        public string LastActionName;
        
        /// <remarks/>
        public string LastActionInitiator;
        
        /// <remarks/>
        public string[] LastActionTargets;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum ActivityFlowDetailLevel {
        
        /// <remarks/>
        ActivityFlowLevel,
        
        /// <remarks/>
        ActionInstanceLevel,
        
        /// <remarks/>
        TaskLevel,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ActivityFlow {
        
        /// <remarks/>
        public ActivityFlowDetailLevel DetailLevel;
        
        /// <remarks/>
        public ActivityFlowStat StatInfo;
        
        /// <remarks/>
        public System.Guid ActivityFlowID;
        
        /// <remarks/>
        public string ActivityFlowDescription;
        
        /// <remarks/>
        public ActivityFlowStatus Status;
        
        /// <remarks/>
        public ActionInstance[] RootActionInstances;
        
        /// <remarks/>
        public string Initiator;
        
        /// <remarks/>
        public string[] Owners;
        
        /// <remarks/>
        public bool AllIgnoring;
        
        /// <remarks/>
        public System.DateTime StartTimeStamp;
        
        /// <remarks/>
        public System.DateTime LastModifiedTimeStamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public ResourceProperty[] ActivityFlowProperties;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Actor {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string FriendlyName;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class FactStoreGroup {
        
        /// <remarks/>
        public string ID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public int[] ActorIndices;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ParameterActorGrouping {
        
        /// <remarks/>
        public int[] ActorIndices;
        
        /// <remarks/>
        public FactStoreGroup[] Groups;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Actors {
        
        /// <remarks/>
        public ParameterActorGrouping GlobalActorGroup;
        
        /// <remarks/>
        public Actor[] ActorList;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class Target {
        
        /// <remarks/>
        public string ParameterName;
        
        /// <remarks/>
        public string InstanceXPath;
        
        /// <remarks/>
        public int Min;
        
        /// <remarks/>
        public int Max;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public class ActionParameters {
        
        /// <remarks/>
        public Activity Action;
        
        /// <remarks/>
        public string XsdDoc;
        
        /// <remarks/>
        public string[] TaskSchemas;
        
        /// <remarks/>
        public Target[] Targets;
        
        /// <remarks/>
        public string ParametersDoc;
        
        /// <remarks/>
        public string ActionInstanceTitle;
        
        /// <remarks/>
        public bool IsOverridable;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum InterruptLevel {
        
        /// <remarks/>
        ActionInstance,
        
        /// <remarks/>
        ActivityModelInstance,
        
        /// <remarks/>
        ActivityFlow,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum InterruptType {
        
        /// <remarks/>
        Abort,
        
        /// <remarks/>
        Rollback,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microsoft.com/Biztalk2004/Hws/Hwsservice")]
    public enum UpdateCacheLevel {
        
        /// <remarks/>
        UpdateCacheLevel_All,
        
        /// <remarks/>
        UpdateCacheLevel_Actions,
        
        /// <remarks/>
        UpdateCacheLevel_ActivityModels,
        
        /// <remarks/>
        UpdateCacheLevel_Constraints,
    }
}
