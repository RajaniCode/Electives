//---------------------------------------------------------------------
// File:      TPPubWS.cs
// 
// Summary:   
//
// Sample:    Litware scenario
//
//---------------------------------------------------------------------
// This file is part of the Microsoft BizTalk Server 2006 SDK
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//
// This source code is intended only as a supplement to Microsoft BizTalk
// Server 2006 release and/or on-line documentation. See these other
// materials for detailed information regarding Microsoft code samples.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, WHETHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
// PURPOSE.
//---------------------------------------------------------------------
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.40607.16.
// 


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="TPPubWSSoap", Namespace="http://www.microsoft.com/BizTalk/KwTpm")]
public class TPPubWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetPartnerOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdatePartnerOperationCompleted;
    
    /// <remarks/>
    public TPPubWS(string servername) {
        this.Url = "http://" +servername+ "/tppubws/tppubws.asmx";
    }
    
    /// <remarks/>
    public event GetPartnerCompletedEventHandler GetPartnerCompleted;
    
    /// <remarks/>
    public event UpdatePartnerCompletedEventHandler UpdatePartnerCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/BizTalk/KwTpm/GetPartner", RequestNamespace="http://www.microsoft.com/BizTalk/KwTpm", ResponseNamespace="http://www.microsoft.com/BizTalk/KwTpm", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetPartner(string partnerId) {
        object[] results = this.Invoke("GetPartner", new object[] {
                    partnerId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPartner(string partnerId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPartner", new object[] {
                    partnerId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetPartner(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetPartnerAsync(string partnerId) {
        this.GetPartnerAsync(partnerId, null);
    }
    
    /// <remarks/>
    public void GetPartnerAsync(string partnerId, object userState) {
        if ((this.GetPartnerOperationCompleted == null)) {
            this.GetPartnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerOperationCompleted);
        }
        this.InvokeAsync("GetPartner", new object[] {
                    partnerId}, this.GetPartnerOperationCompleted, userState);
    }
    
    private void OnGetPartnerOperationCompleted(object arg) {
        if ((this.GetPartnerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetPartnerCompleted(this, new GetPartnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.microsoft.com/BizTalk/KwTpm/UpdatePartner", RequestNamespace="http://www.microsoft.com/BizTalk/KwTpm", ResponseNamespace="http://www.microsoft.com/BizTalk/KwTpm", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdatePartner(string partnerXml) {
        this.Invoke("UpdatePartner", new object[] {
                    partnerXml});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePartner(string partnerXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePartner", new object[] {
                    partnerXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdatePartner(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdatePartnerAsync(string partnerXml) {
        this.UpdatePartnerAsync(partnerXml, null);
    }
    
    /// <remarks/>
    public void UpdatePartnerAsync(string partnerXml, object userState) {
        if ((this.UpdatePartnerOperationCompleted == null)) {
            this.UpdatePartnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePartnerOperationCompleted);
        }
        this.InvokeAsync("UpdatePartner", new object[] {
                    partnerXml}, this.UpdatePartnerOperationCompleted, userState);
    }
    
    private void OnUpdatePartnerOperationCompleted(object arg) {
        if ((this.UpdatePartnerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdatePartnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
public delegate void GetPartnerCompletedEventHandler(object sender, GetPartnerCompletedEventArgs args);

/// <remarks/>
public class GetPartnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetPartnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
public delegate void UpdatePartnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
