#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueryExtenderApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VideoGames")]
	public partial class VideoGamesModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGamePlatform(GamePlatform instance);
    partial void UpdateGamePlatform(GamePlatform instance);
    partial void DeleteGamePlatform(GamePlatform instance);
    partial void InsertVideoGame(VideoGame instance);
    partial void UpdateVideoGame(VideoGame instance);
    partial void DeleteVideoGame(VideoGame instance);
    partial void InsertGameReview(GameReview instance);
    partial void UpdateGameReview(GameReview instance);
    partial void DeleteGameReview(GameReview instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertPlatform(Platform instance);
    partial void UpdatePlatform(Platform instance);
    partial void DeletePlatform(Platform instance);
    #endregion
		
		public VideoGamesModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VideoGamesConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VideoGamesModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoGamesModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoGamesModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoGamesModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GamePlatform> GamePlatforms
		{
			get
			{
				return this.GetTable<GamePlatform>();
			}
		}
		
		public System.Data.Linq.Table<VideoGame> VideoGames
		{
			get
			{
				return this.GetTable<VideoGame>();
			}
		}
		
		public System.Data.Linq.Table<GameReview> GameReviews
		{
			get
			{
				return this.GetTable<GameReview>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Platform> Platforms
		{
			get
			{
				return this.GetTable<Platform>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GamePlatform")]
	public partial class GamePlatform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoGameID;
		
		private int _PlatformID;
		
		private int _ID;
		
		private string _SKU;
		
		private decimal _Price;
		
		private int _StockRemaining;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<GameReview> _GameReviews;
		
		private EntityRef<VideoGame> _VideoGame;
		
		private EntityRef<Platform> _Platform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoGameIDChanging(int value);
    partial void OnVideoGameIDChanged();
    partial void OnPlatformIDChanging(int value);
    partial void OnPlatformIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSKUChanging(string value);
    partial void OnSKUChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnStockRemainingChanging(int value);
    partial void OnStockRemainingChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public GamePlatform()
		{
			this._GameReviews = new EntitySet<GameReview>(new Action<GameReview>(this.attach_GameReviews), new Action<GameReview>(this.detach_GameReviews));
			this._VideoGame = default(EntityRef<VideoGame>);
			this._Platform = default(EntityRef<Platform>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoGameID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VideoGameID
		{
			get
			{
				return this._VideoGameID;
			}
			set
			{
				if ((this._VideoGameID != value))
				{
					if (this._VideoGame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoGameIDChanging(value);
					this.SendPropertyChanging();
					this._VideoGameID = value;
					this.SendPropertyChanged("VideoGameID");
					this.OnVideoGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PlatformID
		{
			get
			{
				return this._PlatformID;
			}
			set
			{
				if ((this._PlatformID != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatformIDChanging(value);
					this.SendPropertyChanging();
					this._PlatformID = value;
					this.SendPropertyChanged("PlatformID");
					this.OnPlatformIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SKU", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SKU
		{
			get
			{
				return this._SKU;
			}
			set
			{
				if ((this._SKU != value))
				{
					this.OnSKUChanging(value);
					this.SendPropertyChanging();
					this._SKU = value;
					this.SendPropertyChanged("SKU");
					this.OnSKUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockRemaining", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int StockRemaining
		{
			get
			{
				return this._StockRemaining;
			}
			set
			{
				if ((this._StockRemaining != value))
				{
					this.OnStockRemainingChanging(value);
					this.SendPropertyChanging();
					this._StockRemaining = value;
					this.SendPropertyChanged("StockRemaining");
					this.OnStockRemainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GamePlatform_GameReview", Storage="_GameReviews", ThisKey="ID", OtherKey="GamePlatformID")]
		public EntitySet<GameReview> GameReviews
		{
			get
			{
				return this._GameReviews;
			}
			set
			{
				this._GameReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoGame_GamePlatform", Storage="_VideoGame", ThisKey="VideoGameID", OtherKey="ID", IsForeignKey=true)]
		public VideoGame VideoGame
		{
			get
			{
				return this._VideoGame.Entity;
			}
			set
			{
				VideoGame previousValue = this._VideoGame.Entity;
				if (((previousValue != value) 
							|| (this._VideoGame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VideoGame.Entity = null;
						previousValue.GamePlatforms.Remove(this);
					}
					this._VideoGame.Entity = value;
					if ((value != null))
					{
						value.GamePlatforms.Add(this);
						this._VideoGameID = value.ID;
					}
					else
					{
						this._VideoGameID = default(int);
					}
					this.SendPropertyChanged("VideoGame");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_GamePlatform", Storage="_Platform", ThisKey="PlatformID", OtherKey="ID", IsForeignKey=true)]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.GamePlatforms.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.GamePlatforms.Add(this);
						this._PlatformID = value.ID;
					}
					else
					{
						this._PlatformID = default(int);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameReviews(GameReview entity)
		{
			this.SendPropertyChanging();
			entity.GamePlatform = this;
		}
		
		private void detach_GameReviews(GameReview entity)
		{
			this.SendPropertyChanging();
			entity.GamePlatform = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VideoGame")]
	public partial class VideoGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Description;
		
		private int _GenreID;
		
		private string _ESRB;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<GamePlatform> _GamePlatforms;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnESRBChanging(string value);
    partial void OnESRBChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public VideoGame()
		{
			this._GamePlatforms = new EntitySet<GamePlatform>(new Action<GamePlatform>(this.attach_GamePlatforms), new Action<GamePlatform>(this.detach_GamePlatforms));
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ESRB", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string ESRB
		{
			get
			{
				return this._ESRB;
			}
			set
			{
				if ((this._ESRB != value))
				{
					this.OnESRBChanging(value);
					this.SendPropertyChanging();
					this._ESRB = value;
					this.SendPropertyChanged("ESRB");
					this.OnESRBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VideoGame_GamePlatform", Storage="_GamePlatforms", ThisKey="ID", OtherKey="VideoGameID")]
		public EntitySet<GamePlatform> GamePlatforms
		{
			get
			{
				return this._GamePlatforms;
			}
			set
			{
				this._GamePlatforms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_VideoGame", Storage="_Genre", ThisKey="GenreID", OtherKey="ID", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.VideoGames.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.VideoGames.Add(this);
						this._GenreID = value.ID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlatforms(GamePlatform entity)
		{
			this.SendPropertyChanging();
			entity.VideoGame = this;
		}
		
		private void detach_GamePlatforms(GamePlatform entity)
		{
			this.SendPropertyChanging();
			entity.VideoGame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameReview")]
	public partial class GameReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GamePlatformID;
		
		private int _Rating;
		
		private string _ReviewText;
		
		private string _ReviewedBy;
		
		private System.DateTime _ReviewedOn;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntityRef<GamePlatform> _GamePlatform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGamePlatformIDChanging(int value);
    partial void OnGamePlatformIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnReviewTextChanging(string value);
    partial void OnReviewTextChanged();
    partial void OnReviewedByChanging(string value);
    partial void OnReviewedByChanged();
    partial void OnReviewedOnChanging(System.DateTime value);
    partial void OnReviewedOnChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public GameReview()
		{
			this._GamePlatform = default(EntityRef<GamePlatform>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePlatformID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GamePlatformID
		{
			get
			{
				return this._GamePlatformID;
			}
			set
			{
				if ((this._GamePlatformID != value))
				{
					if (this._GamePlatform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGamePlatformIDChanging(value);
					this.SendPropertyChanging();
					this._GamePlatformID = value;
					this.SendPropertyChanged("GamePlatformID");
					this.OnGamePlatformIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ReviewText
		{
			get
			{
				return this._ReviewText;
			}
			set
			{
				if ((this._ReviewText != value))
				{
					this.OnReviewTextChanging(value);
					this.SendPropertyChanging();
					this._ReviewText = value;
					this.SendPropertyChanged("ReviewText");
					this.OnReviewTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ReviewedBy
		{
			get
			{
				return this._ReviewedBy;
			}
			set
			{
				if ((this._ReviewedBy != value))
				{
					this.OnReviewedByChanging(value);
					this.SendPropertyChanging();
					this._ReviewedBy = value;
					this.SendPropertyChanged("ReviewedBy");
					this.OnReviewedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewedOn", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ReviewedOn
		{
			get
			{
				return this._ReviewedOn;
			}
			set
			{
				if ((this._ReviewedOn != value))
				{
					this.OnReviewedOnChanging(value);
					this.SendPropertyChanging();
					this._ReviewedOn = value;
					this.SendPropertyChanged("ReviewedOn");
					this.OnReviewedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GamePlatform_GameReview", Storage="_GamePlatform", ThisKey="GamePlatformID", OtherKey="ID", IsForeignKey=true)]
		public GamePlatform GamePlatform
		{
			get
			{
				return this._GamePlatform.Entity;
			}
			set
			{
				GamePlatform previousValue = this._GamePlatform.Entity;
				if (((previousValue != value) 
							|| (this._GamePlatform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GamePlatform.Entity = null;
						previousValue.GameReviews.Remove(this);
					}
					this._GamePlatform.Entity = value;
					if ((value != null))
					{
						value.GameReviews.Add(this);
						this._GamePlatformID = value.ID;
					}
					else
					{
						this._GamePlatformID = default(int);
					}
					this.SendPropertyChanged("GamePlatform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<VideoGame> _VideoGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public Genre()
		{
			this._VideoGames = new EntitySet<VideoGame>(new Action<VideoGame>(this.attach_VideoGames), new Action<VideoGame>(this.detach_VideoGames));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_VideoGame", Storage="_VideoGames", ThisKey="ID", OtherKey="GenreID")]
		public EntitySet<VideoGame> VideoGames
		{
			get
			{
				return this._VideoGames;
			}
			set
			{
				this._VideoGames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideoGames(VideoGame entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_VideoGames(VideoGame entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Platform")]
	public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _RowVersion;
		
		private EntitySet<GamePlatform> _GamePlatforms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public Platform()
		{
			this._GamePlatforms = new EntitySet<GamePlatform>(new Action<GamePlatform>(this.attach_GamePlatforms), new Action<GamePlatform>(this.detach_GamePlatforms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_GamePlatform", Storage="_GamePlatforms", ThisKey="ID", OtherKey="PlatformID")]
		public EntitySet<GamePlatform> GamePlatforms
		{
			get
			{
				return this._GamePlatforms;
			}
			set
			{
				this._GamePlatforms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlatforms(GamePlatform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_GamePlatforms(GamePlatform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
	}
}
#pragma warning restore 1591
