#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NorthWind.Business.LS.TablePerType
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Ecommerce")]
	public partial class TablePerTypeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public TablePerTypeDataContext() : 
				base(global::NorthWind.Business.LS.Properties.Settings.Default.EcommerceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TablePerTypeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablePerTypeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablePerTypeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablePerTypeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		[Function(Name="dbo.DeleteHourlyEmployee")]
		public int DeleteHourlyEmployee([Parameter(DbType="Int")] System.Nullable<int> empid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), empid);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertCommissionedEmployee")]
		public int InsertCommissionedEmployee([Parameter(Name="EmployeeId", DbType="Int")] ref System.Nullable<int> employeeId, [Parameter(Name="Name", DbType="VarChar(50)")] string name, [Parameter(Name="Email", DbType="VarChar(50)")] string email, [Parameter(Name="CommPerc", DbType="Int")] System.Nullable<int> commPerc, [Parameter(Name="ItemsSold", DbType="Int")] System.Nullable<int> itemsSold)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), employeeId, name, email, commPerc, itemsSold);
			employeeId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertHourlyEmployee")]
		public int InsertHourlyEmployee([Parameter(Name="EmployeeId", DbType="Int")] ref System.Nullable<int> employeeId, [Parameter(Name="Name", DbType="VarChar(50)")] string name, [Parameter(Name="Email", DbType="VarChar(50)")] string email, [Parameter(Name="Hours", DbType="Int")] System.Nullable<int> hours, [Parameter(Name="Rate", DbType="Int")] System.Nullable<int> rate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), employeeId, name, email, hours, rate);
			employeeId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertSalariedEmployee")]
		public int InsertSalariedEmployee([Parameter(Name="EmployeeId", DbType="Int")] ref System.Nullable<int> employeeId, [Parameter(Name="Name", DbType="VarChar(50)")] string name, [Parameter(Name="Email", DbType="VarChar(50)")] string email, [Parameter(Name="Salary", DbType="Int")] System.Nullable<int> salary, [Parameter(Name="VacationDays", DbType="Int")] System.Nullable<int> vacationDays)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), employeeId, name, email, salary, vacationDays);
			employeeId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.vwEmployees")]
	[InheritanceMapping(Code="HE", Type=typeof(HourlyEmployee), IsDefault=true)]
	[InheritanceMapping(Code="SE", Type=typeof(SalariedEmployee))]
	[InheritanceMapping(Code="CE", Type=typeof(CommissionedEmployee))]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _Name;
		
		private string _Email;
		
		private string _EType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnETypeChanging(string value);
    partial void OnETypeChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[Column(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_EType", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string EType
		{
			get
			{
				return this._EType;
			}
			set
			{
				if ((this._EType != value))
				{
					this.OnETypeChanging(value);
					this.SendPropertyChanging();
					this._EType = value;
					this.SendPropertyChanged("EType");
					this.OnETypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class HourlyEmployee : Employee
	{
		
		private System.Nullable<int> _Hours;
		
		private System.Nullable<int> _Rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHoursChanging(System.Nullable<int> value);
    partial void OnHoursChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    #endregion
		
		public HourlyEmployee()
		{
			OnCreated();
		}
		
		[Column(Storage="_Hours", DbType="Int")]
		public System.Nullable<int> Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
	}
	
	public partial class SalariedEmployee : Employee
	{
		
		private System.Nullable<int> _Salary;
		
		private System.Nullable<int> _VacationDays;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryChanging(System.Nullable<int> value);
    partial void OnSalaryChanged();
    partial void OnVacationDaysChanging(System.Nullable<int> value);
    partial void OnVacationDaysChanged();
    #endregion
		
		public SalariedEmployee()
		{
			OnCreated();
		}
		
		[Column(Storage="_Salary", DbType="Int")]
		public System.Nullable<int> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[Column(Storage="_VacationDays", DbType="Int")]
		public System.Nullable<int> VacationDays
		{
			get
			{
				return this._VacationDays;
			}
			set
			{
				if ((this._VacationDays != value))
				{
					this.OnVacationDaysChanging(value);
					this.SendPropertyChanging();
					this._VacationDays = value;
					this.SendPropertyChanged("VacationDays");
					this.OnVacationDaysChanged();
				}
			}
		}
	}
	
	public partial class CommissionedEmployee : Employee
	{
		
		private System.Nullable<int> _CommPerc;
		
		private System.Nullable<int> _ItemsSold;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommPercChanging(System.Nullable<int> value);
    partial void OnCommPercChanged();
    partial void OnItemsSoldChanging(System.Nullable<int> value);
    partial void OnItemsSoldChanged();
    #endregion
		
		public CommissionedEmployee()
		{
			OnCreated();
		}
		
		[Column(Storage="_CommPerc", DbType="Int")]
		public System.Nullable<int> CommPerc
		{
			get
			{
				return this._CommPerc;
			}
			set
			{
				if ((this._CommPerc != value))
				{
					this.OnCommPercChanging(value);
					this.SendPropertyChanging();
					this._CommPerc = value;
					this.SendPropertyChanged("CommPerc");
					this.OnCommPercChanged();
				}
			}
		}
		
		[Column(Storage="_ItemsSold", DbType="Int")]
		public System.Nullable<int> ItemsSold
		{
			get
			{
				return this._ItemsSold;
			}
			set
			{
				if ((this._ItemsSold != value))
				{
					this.OnItemsSoldChanging(value);
					this.SendPropertyChanging();
					this._ItemsSold = value;
					this.SendPropertyChanged("ItemsSold");
					this.OnItemsSoldChanged();
				}
			}
		}
	}
}
#pragma warning restore 1591
