//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets9CF73230E18D3A592452300163103946))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets9CF73230E18D3A592452300163103946 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views
        /// </Summary>
        public ViewsForBaseEntitySets9CF73230E18D3A592452300163103946()
        {
            this.EdmEntityContainerName = "IncludeTPTEntities";
            this.StoreEntityContainerName = "IncludeTPTModelStoreContainer";
            this.HashOverMappingClosure = "2cfc092ee4deaeee10c22c96b52c21b1";
            this.HashOverAllExtentViews = "10e9d038350a3f517989123cbe824f11";
            this.ViewCount = 13;
        }
        
        // The method returns the view for the index given.
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                // return view for IncludeTPTModelStoreContainer.Contact
                return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.Contact", @"
    SELECT VALUE -- Constructing Contact
        [IncludeTPTModel.Store].Contact(T1.Contact_ContactId, T1.Contact_ContactName, T1.Contact_Email)
    FROM (
        SELECT 
            T.ContactId AS Contact_ContactId, 
            T.ContactName AS Contact_ContactName, 
            T.Email AS Contact_Email, 
            True AS _from0
        FROM IncludeTPTEntities.Contacts AS T
    ) AS T1");
            }
            else
            {
                if ((index == 1))
                {
                    // return view for IncludeTPTModelStoreContainer.GunSmith
                    return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.GunSmith", @"
    SELECT VALUE -- Constructing GunSmith
        [IncludeTPTModel.Store].GunSmith(T3.GunSmith_GunSmithId, T3.GunSmith_IsCertified, T3.GunSmith_CompanyId)
    FROM (
        SELECT T1.GunSmith_GunSmithId, T2.GunSmith_IsCertified, T1.GunSmith_CompanyId, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.GunSmith).ContactId AS GunSmith_GunSmithId, 
                Key(T.Company).LocationId AS GunSmith_CompanyId, 
                True AS _from1
            FROM IncludeTPTEntities.FK_GunSmith_Company AS T) AS T1
            INNER JOIN (
            SELECT 
                T.ContactId AS GunSmith_GunSmithId, 
                TREAT(T AS IncludeTPTModel.GunSmith).IsCertified AS GunSmith_IsCertified, 
                True AS _from0
            FROM IncludeTPTEntities.Contacts AS T
            WHERE T IS OF (ONLY IncludeTPTModel.GunSmith)) AS T2
            ON T1.GunSmith_GunSmithId = T2.GunSmith_GunSmithId
    ) AS T3");
                }
                else
                {
                    if ((index == 2))
                    {
                        // return view for IncludeTPTModelStoreContainer.Location
                        return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.Location", @"
    SELECT VALUE -- Constructing Location
        [IncludeTPTModel.Store].Location(T3.Location_LocationId, T3.Location_Address, T3.Location_PhoneId)
    FROM (
        SELECT T1.Location_LocationId, T2.Location_Address, T1.Location_PhoneId, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Location).LocationId AS Location_LocationId, 
                Key(T.Phone).PhoneId AS Location_PhoneId, 
                True AS _from1
            FROM IncludeTPTEntities.FK_Location_Phone AS T) AS T1
            INNER JOIN (
            SELECT 
                T.LocationId AS Location_LocationId, 
                T.Address AS Location_Address, 
                True AS _from0
            FROM IncludeTPTEntities.Location AS T) AS T2
            ON T1.Location_LocationId = T2.Location_LocationId
    ) AS T3");
                    }
                    else
                    {
                        if ((index == 3))
                        {
                            // return view for IncludeTPTModelStoreContainer.Company
                            return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.Company", @"
    SELECT VALUE -- Constructing Company
        [IncludeTPTModel.Store].Company(T1.Company_CompanyId, T1.Company_CompanyName)
    FROM (
        SELECT 
            T.LocationId AS Company_CompanyId, 
            TREAT(T AS IncludeTPTModel.Company).CompanyName AS Company_CompanyName, 
            True AS _from0
        FROM IncludeTPTEntities.Location AS T
        WHERE T IS OF (ONLY IncludeTPTModel.Company)
    ) AS T1");
                        }
                        else
                        {
                            if ((index == 4))
                            {
                                // return view for IncludeTPTModelStoreContainer.Phone
                                return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.Phone", @"
    SELECT VALUE -- Constructing Phone
        [IncludeTPTModel.Store].Phone(T1.Phone_PhoneId, T1.Phone_Number)
    FROM (
        SELECT 
            T.PhoneId AS Phone_PhoneId, 
            T.Number AS Phone_Number, 
            True AS _from0
        FROM IncludeTPTEntities.Phone AS T
    ) AS T1");
                            }
                            else
                            {
                                if ((index == 5))
                                {
                                    // return view for IncludeTPTModelStoreContainer.Department
                                    return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTModelStoreContainer.Department", @"
    SELECT VALUE -- Constructing Department
        [IncludeTPTModel.Store].Department(T3.Department_DepartmentId, T3.Department_Name, T3.Department_CompanyId)
    FROM (
        SELECT T1.Department_DepartmentId, T2.Department_Name, T1.Department_CompanyId, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Departments).DepartmentId AS Department_DepartmentId, 
                Key(T.Company).LocationId AS Department_CompanyId, 
                True AS _from1
            FROM IncludeTPTEntities.FK_Departments_Company AS T) AS T1
            INNER JOIN (
            SELECT 
                T.DepartmentId AS Department_DepartmentId, 
                T.Name AS Department_Name, 
                True AS _from0
            FROM IncludeTPTEntities.DepartmentSet AS T) AS T2
            ON T1.Department_DepartmentId = T2.Department_DepartmentId
    ) AS T3");
                                }
                                else
                                {
                                    if ((index == 6))
                                    {
                                        // return view for IncludeTPTEntities.Contacts
                                        return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.Contacts", @"
    SELECT VALUE -- Constructing Contacts
        CASE
            WHEN NOT(T3._from1) THEN IncludeTPTModel.Contact(T3.Contact_ContactId, T3.Contact_ContactName, T3.Contact_Email)
            ELSE IncludeTPTModel.GunSmith(T3.Contact_ContactId, T3.Contact_ContactName, T3.Contact_Email, T3.GunSmith_IsCertified) WITH 
                RELATIONSHIP(CREATEREF(IncludeTPTEntities.Location, ROW(T3.[FK_GunSmith_Company.Company.LocationId]),IncludeTPTModel.Company),IncludeTPTModel.FK_GunSmith_Company,GunSmith,Company) 
        END
    FROM (
        SELECT T1.Contact_ContactId, T1.Contact_ContactName, T1.Contact_Email, T2.GunSmith_IsCertified, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, T2.[FK_GunSmith_Company.Company.LocationId]
        FROM  (
            SELECT 
                T.ContactId AS Contact_ContactId, 
                T.ContactName AS Contact_ContactName, 
                T.Email AS Contact_Email, 
                True AS _from0
            FROM IncludeTPTModelStoreContainer.Contact AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.GunSmithId AS Contact_ContactId, 
                T.IsCertified AS GunSmith_IsCertified, 
                True AS _from1, 
                T.CompanyId AS [FK_GunSmith_Company.Company.LocationId]
            FROM IncludeTPTModelStoreContainer.GunSmith AS T) AS T2
            ON T1.Contact_ContactId = T2.Contact_ContactId
    ) AS T3");
                                    }
                                    else
                                    {
                                        if ((index == 7))
                                        {
                                            // return view for IncludeTPTEntities.Location
                                            return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.Location", "\r\n    SELECT VALUE -- Constructing Location\r\n        CASE\r\n            WHEN NOT(T" +
                                                    "3._from1) THEN IncludeTPTModel.Location(T3.Location_LocationId, T3.Location_Addr" +
                                                    "ess) WITH \r\n                RELATIONSHIP(CREATEREF(IncludeTPTEntities.Phone, ROW" +
                                                    "(T3.[FK_Location_Phone.Phone.PhoneId]),IncludeTPTModel.Phone),IncludeTPTModel.FK" +
                                                    "_Location_Phone,Location,Phone) \r\n            ELSE IncludeTPTModel.Company(T3.Lo" +
                                                    "cation_LocationId, T3.Location_Address, T3.Company_CompanyName) WITH \r\n         " +
                                                    "       RELATIONSHIP(CREATEREF(IncludeTPTEntities.Phone, ROW(T3.[FK_Location_Phon" +
                                                    "e.Phone.PhoneId]),IncludeTPTModel.Phone),IncludeTPTModel.FK_Location_Phone,Locat" +
                                                    "ion,Phone) \r\n        END\r\n    FROM (\r\n        SELECT T1.Location_LocationId, T1." +
                                                    "Location_Address, T2.Company_CompanyName, T1._from0, (T2._from1 AND T2._from1 IS" +
                                                    " NOT NULL) AS _from1, T1.[FK_Location_Phone.Phone.PhoneId]\r\n        FROM  (\r\n   " +
                                                    "         SELECT \r\n                T.LocationId AS Location_LocationId, \r\n       " +
                                                    "         T.Address AS Location_Address, \r\n                True AS _from0, \r\n    " +
                                                    "            T.PhoneId AS [FK_Location_Phone.Phone.PhoneId]\r\n            FROM Inc" +
                                                    "ludeTPTModelStoreContainer.Location AS T) AS T1\r\n            LEFT OUTER JOIN (\r\n" +
                                                    "            SELECT \r\n                T.CompanyId AS Location_LocationId, \r\n     " +
                                                    "           T.CompanyName AS Company_CompanyName, \r\n                True AS _from" +
                                                    "1\r\n            FROM IncludeTPTModelStoreContainer.Company AS T) AS T2\r\n         " +
                                                    "   ON T1.Location_LocationId = T2.Location_LocationId\r\n    ) AS T3");
                                        }
                                        else
                                        {
                                            if ((index == 8))
                                            {
                                                // return view for IncludeTPTEntities.Phone
                                                return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.Phone", @"
    SELECT VALUE -- Constructing Phone
        IncludeTPTModel.Phone(T1.Phone_PhoneId, T1.Phone_Number)
    FROM (
        SELECT 
            T.PhoneId AS Phone_PhoneId, 
            T.Number AS Phone_Number, 
            True AS _from0
        FROM IncludeTPTModelStoreContainer.Phone AS T
    ) AS T1");
                                            }
                                            else
                                            {
                                                if ((index == 9))
                                                {
                                                    // return view for IncludeTPTEntities.DepartmentSet
                                                    return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.DepartmentSet", @"
    SELECT VALUE -- Constructing DepartmentSet
        IncludeTPTModel.Department(T1.Department_DepartmentId, T1.Department_Name) WITH 
        RELATIONSHIP(CREATEREF(IncludeTPTEntities.Location, ROW(T1.[FK_Departments_Company.Company.LocationId]),IncludeTPTModel.Company),IncludeTPTModel.FK_Departments_Company,Departments,Company) 
    FROM (
        SELECT 
            T.DepartmentId AS Department_DepartmentId, 
            T.Name AS Department_Name, 
            True AS _from0, 
            T.CompanyId AS [FK_Departments_Company.Company.LocationId]
        FROM IncludeTPTModelStoreContainer.Department AS T
    ) AS T1");
                                                }
                                                else
                                                {
                                                    if ((index == 10))
                                                    {
                                                        // return view for IncludeTPTEntities.FK_GunSmith_Company
                                                        return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.FK_GunSmith_Company", @"
    SELECT VALUE -- Constructing FK_GunSmith_Company
        IncludeTPTModel.FK_GunSmith_Company(T3.[FK_GunSmith_Company.Company], T3.[FK_GunSmith_Company.GunSmith])
    FROM (
        SELECT -- Constructing Company
            CreateRef(IncludeTPTEntities.Location, row(T2.[FK_GunSmith_Company.Company.LocationId]),IncludeTPTModel.Company) AS [FK_GunSmith_Company.Company], 
            T2.[FK_GunSmith_Company.GunSmith]
        FROM (
            SELECT -- Constructing GunSmith
                CreateRef(IncludeTPTEntities.Contacts, row(T1.[FK_GunSmith_Company.GunSmith.ContactId]),IncludeTPTModel.GunSmith) AS [FK_GunSmith_Company.GunSmith], 
                T1.[FK_GunSmith_Company.Company.LocationId]
            FROM (
                SELECT 
                    T.CompanyId AS [FK_GunSmith_Company.Company.LocationId], 
                    T.GunSmithId AS [FK_GunSmith_Company.GunSmith.ContactId], 
                    True AS _from0
                FROM IncludeTPTModelStoreContainer.GunSmith AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                    }
                                                    else
                                                    {
                                                        if ((index == 11))
                                                        {
                                                            // return view for IncludeTPTEntities.FK_Location_Phone
                                                            return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.FK_Location_Phone", @"
    SELECT VALUE -- Constructing FK_Location_Phone
        IncludeTPTModel.FK_Location_Phone(T3.[FK_Location_Phone.Phone], T3.[FK_Location_Phone.Location])
    FROM (
        SELECT -- Constructing Phone
            CreateRef(IncludeTPTEntities.Phone, row(T2.[FK_Location_Phone.Phone.PhoneId]),IncludeTPTModel.Phone) AS [FK_Location_Phone.Phone], 
            T2.[FK_Location_Phone.Location]
        FROM (
            SELECT -- Constructing Location
                CreateRef(IncludeTPTEntities.Location, row(T1.[FK_Location_Phone.Location.LocationId]),IncludeTPTModel.Location) AS [FK_Location_Phone.Location], 
                T1.[FK_Location_Phone.Phone.PhoneId]
            FROM (
                SELECT 
                    T.PhoneId AS [FK_Location_Phone.Phone.PhoneId], 
                    T.LocationId AS [FK_Location_Phone.Location.LocationId], 
                    True AS _from0
                FROM IncludeTPTModelStoreContainer.Location AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                        }
                                                        else
                                                        {
                                                            if ((index == 12))
                                                            {
                                                                // return view for IncludeTPTEntities.FK_Departments_Company
                                                                return new System.Collections.Generic.KeyValuePair<string, string>("IncludeTPTEntities.FK_Departments_Company", @"
    SELECT VALUE -- Constructing FK_Departments_Company
        IncludeTPTModel.FK_Departments_Company(T3.[FK_Departments_Company.Company], T3.[FK_Departments_Company.Departments])
    FROM (
        SELECT -- Constructing Company
            CreateRef(IncludeTPTEntities.Location, row(T2.[FK_Departments_Company.Company.LocationId]),IncludeTPTModel.Company) AS [FK_Departments_Company.Company], 
            T2.[FK_Departments_Company.Departments]
        FROM (
            SELECT -- Constructing Departments
                CreateRef(IncludeTPTEntities.DepartmentSet, row(T1.[FK_Departments_Company.Departments.DepartmentId]),IncludeTPTModel.Department) AS [FK_Departments_Company.Departments], 
                T1.[FK_Departments_Company.Company.LocationId]
            FROM (
                SELECT 
                    T.CompanyId AS [FK_Departments_Company.Company.LocationId], 
                    T.DepartmentId AS [FK_Departments_Company.Departments.DepartmentId], 
                    True AS _from0
                FROM IncludeTPTModelStoreContainer.Department AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}
