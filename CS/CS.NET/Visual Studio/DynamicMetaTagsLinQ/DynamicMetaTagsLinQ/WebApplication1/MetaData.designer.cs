#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MetaTags")]
	public partial class MetaDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertMetaData(MetaData instance);
    partial void UpdateMetaData(MetaData instance);
    partial void DeleteMetaData(MetaData instance);
    #endregion
		
		public MetaDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MetaTagsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MetaDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetaDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetaDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetaDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<MetaData> MetaDatas
		{
			get
			{
				return this.GetTable<MetaData>();
			}
		}
	}
	
	[Table(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PageId;
		
		private string _PageName;
		
		private EntitySet<MetaData> _MetaDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnPageNameChanging(string value);
    partial void OnPageNameChanged();
    #endregion
		
		public Page()
		{
			this._MetaDatas = new EntitySet<MetaData>(new Action<MetaData>(this.attach_MetaDatas), new Action<MetaData>(this.detach_MetaDatas));
			OnCreated();
		}
		
		[Column(Storage="_PageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PageName
		{
			get
			{
				return this._PageName;
			}
			set
			{
				if ((this._PageName != value))
				{
					this.OnPageNameChanging(value);
					this.SendPropertyChanging();
					this._PageName = value;
					this.SendPropertyChanged("PageName");
					this.OnPageNameChanged();
				}
			}
		}
		
		[Association(Name="Page_MetaData", Storage="_MetaDatas", ThisKey="PageId", OtherKey="PageId")]
		public EntitySet<MetaData> MetaDatas
		{
			get
			{
				return this._MetaDatas;
			}
			set
			{
				this._MetaDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MetaDatas(MetaData entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_MetaDatas(MetaData entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[Table(Name="dbo.MetaData")]
	public partial class MetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MetaDataId;
		
		private int _PageId;
		
		private string _KeyName;
		
		private string _Value;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetaDataIdChanging(int value);
    partial void OnMetaDataIdChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public MetaData()
		{
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[Column(Storage="_MetaDataId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MetaDataId
		{
			get
			{
				return this._MetaDataId;
			}
			set
			{
				if ((this._MetaDataId != value))
				{
					this.OnMetaDataIdChanging(value);
					this.SendPropertyChanging();
					this._MetaDataId = value;
					this.SendPropertyChanged("MetaDataId");
					this.OnMetaDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageId", DbType="Int NOT NULL")]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_KeyName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="Page_MetaData", Storage="_Page", ThisKey="PageId", OtherKey="PageId", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.MetaDatas.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.MetaDatas.Add(this);
						this._PageId = value.PageId;
					}
					else
					{
						this._PageId = default(int);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
