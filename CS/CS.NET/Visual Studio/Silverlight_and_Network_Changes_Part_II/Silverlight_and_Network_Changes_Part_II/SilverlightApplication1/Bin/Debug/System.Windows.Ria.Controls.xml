<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Ria.Controls</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Common.CommonResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.CannotConvertValue">
            <summary>
              Looks up a localized string similar to The provided value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.EventNotFound">
            <summary>
              Looks up a localized string similar to The event named &apos;{0}&apos; cannot be found on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.InvalidPropertyAccess">
            <summary>
              Looks up a localized string similar to The property named &apos;{1}&apos; cannot be accessed because &apos;{0}&apos; returned a null reference. .
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; cannot be found on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotReadable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be read..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.PropertyNotWritable">
            <summary>
              Looks up a localized string similar to The property named &apos;{0}&apos; on type &apos;{1}&apos; cannot be written..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.TypeConverters_ConvertFrom_CannotConvert">
            <summary>
              Looks up a localized string similar to {0} cannot convert from {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Common.CommonResources.TypeConverters_ConvertFromString_CannotConvert">
            <summary>
              Looks up a localized string similar to Cannot convert {1} to type {0}..
            </summary>
        </member>
        <member name="T:System.Windows.Common.Utilities">
            <summary>
            Utility class for sharing code
            </summary>
        </member>
        <member name="M:System.Windows.Common.Utilities.AreValuesEqual(System.Object,System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="value1">first object to compare</param>
            <param name="value2">second object to compare</param>
            <returns>True if the two values are equal</returns>
        </member>
        <member name="M:System.Windows.Common.Utilities.GetConvertedValue(System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts a value to the provided targetType
            </summary>
            <param name="culture">Culture used for the conversion</param>
            <param name="targetType">Destination type</param>
            <param name="value">Value to convert</param>
            <returns>Exception when conversion fails</returns>
        </member>
        <member name="M:System.Windows.Common.Utilities.IsConversionException(System.Exception)">
            <summary>
            Determines whether an exception is acceptable for type conversion operations.
            </summary>
            <param name="exception">Exception to check</param>
            <returns>True if the exception is an acceptable conversion exception</returns>
        </member>
        <member name="T:System.Windows.Common.DebugTrace">
            <summary>
            Simple debug tracing utility.
            See sample usage in DomainDataSource.cs
            </summary>
        </member>
        <member name="M:System.Windows.Common.DebugTrace.TraceSwitch.#ctor(System.String)">
            <summary>
            Internal TraceSwitch constructor.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:System.Windows.Common.DebugTrace.TraceSwitch.DisplayName">
            <summary>
            Gets the DisplayName.
            </summary>
        </member>
        <member name="T:System.Windows.Common.DependencyObjectExtensions">
            <summary>
            Utility class for DependencyObject/DependencyProperty related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.IsHandlerSuspended(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Determines whether a dependency object has suspended the change handler for the provided dependency property.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to examine.</param>
            <param name="dependencyProperty">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to examine.</param>
            <returns>True when the change handler is suspended.</returns>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.SetValueNoCallback(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Suspends the change handler of a dependency property, sets the property value and reactivates the
            change handler.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyObject"/> to update without triggering a change event.</param>
            <param name="property">The <see cref="T:System.Windows.DependencyObject"/>'s <see cref="T:System.Windows.DependencyProperty"/> to set.</param>
            <param name="value">The value that <paramref name="property"/> should be set to.</param>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.GetCurrentChildren(System.Windows.DependencyObject)">
            <summary>
            Returns an array containing the DependencyObject children.
            </summary>
            <param name="dependencyObject">DependencyObject to return children of.</param>
            <returns>An array of DependencyObjects.</returns>
        </member>
        <member name="M:System.Windows.Common.DependencyObjectExtensions.FindChildByName(System.Windows.DependencyObject,System.String)">
            <summary>
            Attempts to find a child DependencyObject by name.
            </summary>
            <param name="dependencyObject">DependencyObject to search.</param>
            <param name="name">Name of the child element to find.</param>
            <returns>A child DependencyObject with the provided name or null if not found.</returns>
        </member>
        <member name="T:System.Windows.Common.EnumerableExtensions">
            <summary>
            Utility class for IEnumerable related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Returns the number of items in an System.Collections.IEnumerable.
            </summary>
            <param name="enumerable">The IEnumerable extended by this method.</param>
            <returns>Number of items in the System.Collections.IEnumerable</returns>
        </member>
        <member name="M:System.Windows.Common.EnumerableExtensions.Count(System.Collections.IEnumerable,System.Type)">
            <summary>
            Returns the number of items in an System.Collections.IEnumerable of the given type.
            </summary>
            <param name="enumerable">The IEnumerable extended by this method.</param>
            <param name="filter">Only the item with the provided type are counted.</param>
            <returns>Number of items in the System.Collections.IEnumerable of the given type</returns>
        </member>
        <member name="M:System.Windows.Common.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether an System.Collections.IEnumerable has 0 items or more.
            </summary>
            <param name="enumerable">The IEnumerable extended by this method.</param>
            <returns>True when the enumerable is empty</returns>
        </member>
        <member name="T:System.Windows.Common.FrameworkElementExtensions">
            <summary>
            Utility class for FrameworkElement related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.FrameworkElementExtensions.FindFrameworkElement(System.Windows.FrameworkElement,System.String)">
            <summary>
            Walks up the parent chain of the provided System.Windows.FrameworkElement
            element and looks for a child System.Windows.FrameworkElement with the given name.
            </summary>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement"/> extended by this method.</param>
            <param name="name">The name of the <see cref="T:System.Windows.FrameworkElement"/> to find.</param>
            <returns>The FrameworkElement with the given name, or null</returns>
        </member>
        <member name="T:System.Windows.Common.GeneralEventHandlerRegistrationResult">
            <summary>
            Possible return values for registration operation below
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.Success">
            <summary>
            Operation succeeded
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.AlreadyRegistered">
            <summary>
            The provided handler/event/sender combination is already registered
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.InvalidEventName">
            <summary>
            The event name provided is not found on the sender
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.InvalidSignature">
            <summary>
            The event provided does not have the supported signature
            </summary>
        </member>
        <member name="F:System.Windows.Common.GeneralEventHandlerRegistrationResult.MaximumEventNamesAlreadyRegistered">
            <summary>
            The provided sender has already registered the maximum number of event types
            </summary>
        </member>
        <member name="T:System.Windows.Common.IGeneralEventHandler">
            <summary>
            Interface the interested parties need to implement to use the GeneralEventHandler utility
            </summary>
        </member>
        <member name="M:System.Windows.Common.IGeneralEventHandler.HandleGeneralEvent(System.Object,System.EventArgs,System.String)">
            <summary>
            This method gets invoked by the GeneralEventHandler class whenever a registered event 
            is raised. All interested parties (i.e. all registered handlers) for this particular
            sender and event name get notified.
            </summary>
            <param name="sender">Source of the raised event</param>
            <param name="e">Arguments of the raised event</param>
            <param name="eventName">Name of the raised event</param>
        </member>
        <member name="T:System.Windows.Common.GeneralEventHandler">
            <summary>
            Static utility class that allows to listen to events on any kind of of object (typically a UI control)
            - Multiple interested parties (i.e. handlers) can register for the same event on the same sender.
            - Interested parties need to implement the small IGeneralEventHandler interface
            - Whenever an event is raised, all interested parties get notified via a IGeneralEventHandler.HandleGeneralEvent call
            that specifies the event source (sender) and event name
            - Each sender instance can only be registered with 5 kinds of events. This limit can easily be increased/decreased by
            1. Changing the MaximumEventsPerSender constant
            2. Updating the list of GeneralEventHandler# functions
            - When an interested party is no longer interested, it should call UnregisterEventHandler to release its reference.
            </summary>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.RegisterEventHandler(System.Windows.Common.IGeneralEventHandler,System.Object,System.String)">
            <summary>
            Registers a particular handler, sender, event name combination.
            </summary>
            <param name="handler">Handler interested in the event</param>
            <param name="sender">Object that raises the event</param>
            <param name="eventName">Name of the event</param>
            <returns>GeneralEventHandlerRegistrationResult indicating success or failure</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.UnregisterEventHandler(System.Windows.Common.IGeneralEventHandler,System.Object,System.String)">
            <summary>
            Unregisters a particular handler/sender/event combination.
            </summary>
            <param name="handler">Handler that previously registered the event</param>
            <param name="sender">Event source that was previously registered</param>
            <param name="eventName">Event name that was previously registered</param>
            <returns>True when the combination was found and unregistered, False otherwise</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.GetEventHandlerParameterTypes(System.Type)">
            <summary>
            Gets the list of expected argument types for the event handler
            </summary>
            <param name="eventHandlerType">The event handler <see cref="T:System.Type"/>.</param>
            <returns>List of expected argument types for the event handler</returns>
        </member>
        <member name="M:System.Windows.Common.GeneralEventHandler.GeneralEventHandler_(System.Object,System.EventArgs,System.Int32)">
            <summary>
            Common event handler that forwards the notification to the various
            interested parties.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
            <param name="eventIndex">The event index.</param>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal">
            <summary>
            A CollectionViewGroupInternal, as created by a PagedCollectionView 
            according to a GroupDescription.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._groupBy">
            <summary>
            GroupDescription used to define how to group the items
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._parentGroup">
            <summary>
            Parent group of this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupInternal._version">
            <summary>
            Used for detecting stale enumerators
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.#ctor(System.Object,System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the CollectionViewGroupInternal class.
            </summary>
            <param name="name">Name of the CollectionViewGroupInternal</param>
            <param name="parent">Parent node of the CollectionViewGroup</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Add(System.Object)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Clear">
            <summary>
            Clears the collection of items
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.GetLeafEnumerator">
            <summary>
            Returns an enumerator over the leaves governed by this group
            </summary>
            <returns>Enumerator of leaves</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Insert(System.Object,System.Object,System.Collections.IComparer)">
            <summary>
            Insert a new item or subgroup and return its index.  Seed is a
            representative from the subgroup (or the item itself) that
            is used to position the new item/subgroup w.r.t. the order given
            by the comparer. (If comparer is null, just add at the end).
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <returns>The index where the item was inserted</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafAt(System.Int32)">
            <summary>
            Return the item at the given index within the list of leaves governed
            by this group
            </summary>
            <param name="index">Index of the leaf</param>
            <returns>Item at given index</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexFromItem(System.Object,System.Int32)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by the full group structure.  The item must be a (direct) child of this
            group.  The caller provides the index of the item within this group,
            if known, or -1 if not.
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="index">Index of the leaf</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafIndexOf(System.Object)">
            <summary>
            Returns the index of the given item within the list of leaves governed
            by this group
            </summary>
            <param name="item">Item we are looking for</param>
            <returns>Number of items under that leaf</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged">
            <summary>
            The group's description has changed - notify parent 
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified item from the collection
            </summary>
            <param name="item">Item to remove</param>
            <param name="returnLeafIndex">Whether we want to return the leaf index</param>
            <returns>Leaf index where item was removed, if value was specified. Otherwise '-1'</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.RemoveEmptyGroup(System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Removes an empty group from the PagedCollectionView grouping
            </summary>
            <param name="group">Empty subgroup to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ChangeCounts(System.Object,System.Int32)">
            <summary>
            Update the item count of the CollectionViewGroup
            </summary>
            <param name="item">CollectionViewGroup to update</param>
            <param name="delta">Delta to change count by</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.OnGroupByChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for the GroupBy PropertyChanged event
            </summary>
            <param name="sender">CollectionViewGroupInternal whose GroupBy property changed</param>
            <param name="e">The args for the PropertyChanged event</param>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.IsBottomLevel">
            <summary>
            Gets a value indicating whether this group 
            is at the bottom level (not further sub-grouped).
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.FullCount">
            <summary>
            Gets or sets the number of items and groups in the subtree under this group
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.GroupBy">
            <summary>
            Gets or sets how this group divides into subgroups
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.LastIndex">
            <summary>
            Gets or sets the most recent index where activity took place
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.SeedItem">
            <summary>
            Gets the first item (leaf) added to this group.  If this can't be determined,
            DependencyProperty.UnsetValue.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.Parent">
            <summary>
            Gets the parent node for this CollectionViewGroupInternal
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.ListComparer">
            <summary>
            This comparer is used to insert an item into a group in a position consistent
            with a given IList.  It only works when used in the pattern that FindIndex
            uses, namely first call Reset(), then call Compare(item, x) any number of
            times with the same item (the new item) as the first argument, and a sequence
            of x's as the second argument that appear in the IList in the same sequence.
            This makes the total search time linear in the size of the IList.  (To give
            the correct answer regardless of the sequence of arguments would involve
            calling IndexOf and leads to O(N^2) total search time.) 
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.#ctor(System.Collections.IList)">
            <summary>
            Constructor for the ListComparer that takes
            in an IList.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.ResetList(System.Collections.IList)">
            <summary>
            Sets our IList to a new instance
            of a list being passed in and resets
            the index.
            </summary>
            <param name="list">IList used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.ListComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer">
            <summary>
            This comparer is used to insert an item into a group in a position consistent
            with a given CollectionViewGroupRoot. We will only use this when dealing with
            a temporary CollectionViewGroupRoot that points to the correct grouping of the
            entire collection, and we have paging that requires us to keep the paged group
            consistent with the order of items in the temporary group.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.#ctor(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Constructor for the CollectionViewGroupComparer that takes
            in an CollectionViewGroupRoot.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.Reset">
            <summary>
            Sets the index that we start comparing
            from to 0.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.ResetGroup(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Sets our group to a new instance of a
            CollectionViewGroupRoot being passed in
            and resets the index.
            </summary>
            <param name="group">CollectionViewGroupRoot used to compare on</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.CollectionViewGroupComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares objects x and y to see which one
            should appear first.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns>-1 if x is less than y, +1 otherwise</returns>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator">
            <summary>
            Enumerator for the leaves in the CollectionViewGroupInternal class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.#ctor(System.Windows.Data.CollectionViewGroupInternal)">
            <summary>
            Initializes a new instance of the LeafEnumerator class.
            </summary>
            <param name="group">CollectionViewGroupInternal that uses the enumerator</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.DoReset">
            <summary>
            Private helper to reset the enumerator
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset implementation for IEnumerator
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            MoveNext implementation for IEnumerator
            </summary>
            <returns>Returns whether the MoveNext operation was successful</returns>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupInternal.LeafEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current implementation for IEnumerator
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot">
            <summary>
            PagedCollectionView classes use this class as the manager 
            of all Grouping functionality
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.RootName">
            <summary>
            String constant used for the Root Name
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.UseAsItemDirectly">
            <summary>
            Private accessor for empty object instance
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot.topLevelGroupDescription">
            <summary>
            Private accessor for the top level GroupDescription
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._groupBy">
            <summary>
            Private accessor for an ObservableCollection containing group descriptions
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._isDataInGroupOrder">
            <summary>
            Indicates whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping.
            </summary>
        </member>
        <member name="F:System.Windows.Data.CollectionViewGroupRoot._view">
            <summary>
            Private accessor for the owning ICollectionView
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.#ctor(System.ComponentModel.ICollectionView,System.Boolean)">
            <summary>
            Initializes a new instance of the CollectionViewGroupRoot class.
            </summary>
            <param name="view">PagedCollectionView that contains this grouping</param>
            <param name="isDataInGroupOrder">True if items are already in correct order for grouping</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Boolean)">
            <summary>
            Adds specified item to subgroups
            </summary>
            <param name="item">Item to add</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.FindIndex(System.Object,System.Object,System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Finds the index of the specified item
            </summary>
            <param name="item">Item we are looking for</param>
            <param name="seed">Seed of the item we are looking for</param>
            <param name="comparer">Comparer used to find the item</param>
            <param name="low">Low range of item index</param>
            <param name="high">High range of item index</param>
            <returns>Index of the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.Initialize">
            <summary>
            Initializes the group descriptions
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InsertSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Inserts specified item into the collection
            </summary>
            <param name="index">Index to insert into</param>
            <param name="item">Item to insert</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notify listeners that this View has changed
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should take their filter/sort/grouping
            into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">The NotifyCollectionChangedEventArgs to be passed to the EventHandler</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.OnGroupByChanged">
            <summary>
            Notify host that a group description has changed somewhere in the tree
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object)">
            <summary>
            Remove specified item from subgroups
            </summary>
            <param name="item">Item to remove</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Object)">
            <summary>
            Remove specified item from subgroups using an exhaustive search
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveSpecialItem(System.Int32,System.Object,System.Boolean)">
            <summary>
            Removes specified item into the collection
            </summary>
            <param name="index">Index to remove from</param>
            <param name="item">Item to remove</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object,System.Boolean)">
            <summary>
            Add an item to the subgroup with the given name
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping.</param>
            <param name="name">Name of subgroup to add to</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.AddToSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Boolean)">
            <summary>
            Add an item to the desired subgroup(s) of the given group
            </summary>
            <param name="item">Item to add</param>
            <param name="group">Group to add item to</param>
            <param name="level">The level of grouping</param>
            <param name="loading">Whether we are currently loading</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupDescription(System.Windows.Data.CollectionViewGroup,System.Int32)">
            <summary>
            Returns the description of how to divide the given group into subgroups
            </summary>
            <param name="group">CollectionViewGroup to get group description from</param>
            <param name="level">The level of grouping</param>
            <returns>GroupDescription of how to divide the given group</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.GetGroupName(System.Object,System.ComponentModel.GroupDescription,System.Int32)">
            <summary>
            Get the group name(s) for the given item
            </summary>
            <param name="item">Item to get group name for</param>
            <param name="groupDescription">GroupDescription for the group</param>
            <param name="level">The level of grouping</param>
            <returns>Group names for the specified item</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.InitializeGroup(System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Initialize the given group
            </summary>
            <param name="group">Group to initialize</param>
            <param name="level">The level of grouping</param>
            <param name="seedItem">The seed item to compare with to see where to insert</param>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromGroupDirectly(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            Remove an item from the direct children of a group.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
            <returns>True if item could not be removed</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroup(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32,System.Object)">
            <summary>
            Remove an item from the subgroup with the given name.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <param name="name">Name of item to remove</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveFromSubgroups(System.Object,System.Windows.Data.CollectionViewGroupInternal,System.Int32)">
            <summary>
            Remove an item from the desired subgroup(s) of the given group.
            </summary>
            <param name="item">Item to remove</param>
            <param name="group">Group to remove item from</param>
            <param name="level">The level of grouping</param>
            <returns>Return true if the item was not in one of the subgroups it was supposed to be.</returns>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.RemoveItemFromSubgroupsByExhaustiveSearch(System.Windows.Data.CollectionViewGroupInternal,System.Object)">
            <summary>
            The item did not appear in one or more of the subgroups it
            was supposed to.  This can happen if the item's properties
            change so that the group names we used to insert it are
            different from the names used to remove it. If this happens,
            remove the item the hard way.
            </summary>
            <param name="group">Group to remove item from</param>
            <param name="item">Item to remove</param>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.CollectionChanged">
            <summary>
            Raise this event when the (grouped) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptionChanged">
            <summary>
            Raise this event when the GroupDescriptions change
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupBySelector">
            <summary>
            Gets or sets a delegate to select the group description as a 
            function of the parent group and its level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.ActiveComparer">
            <summary>
            Gets or sets the current IComparer being used
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.Culture">
            <summary>
            Gets the culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.CollectionViewGroupRoot.IsDataInGroupOrder">
            <summary>
            Gets or sets a value indicating whether the data is in group order
            </summary>
        </member>
        <member name="T:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription">
            <summary>
            TopLevelGroupDescription class
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.#ctor">
            <summary>
            Initializes a new instance of the TopLevelGroupDescription class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.CollectionViewGroupRoot.TopLevelGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            We have to implement this abstract method, but it should never be called
            </summary>
            <param name="item">Item to get group name from</param>
            <param name="level">The level of grouping</param>
            <param name="culture">Culture used for sorting</param>
            <returns>We do not return a value here</returns>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView">
            <summary>
            EntityCollectionView view over an IEnumerable.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._canChangePage">
            <summary>
            Private accessor for CanChangePage
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._culture">
            <summary>
            CultureInfo used in this EntityCollectionView
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the Monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentItem">
            <summary>
            Private accessor for the CurrentItem
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._currentPosition">
            <summary>
            Private accessor for the CurrentPosition
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._deferLevel">
            <summary>
            The number of requests to defer Refresh()
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._deferRefreshDisposed">
            <summary>
            The callback action in the DomainDataSource for when DeferRefresh() is disposed;
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._editItem">
            <summary>
            The item we are currently editing
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._flags">
            <summary>
            Private accessor for the CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._group">
            <summary>
            Private accessor for the Grouping data
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._internalList">
            <summary>
            Private accessor for the InternalList
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._isUsingTemporaryGroup">
            <summary>
            Private accessor for indicating whether we want to point to the temporary grouping data for calculations
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._itemCount">
            <summary>
            Represents the known number of items in the source collection
            that verify the potential filter
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._newItem">
            <summary>
            The new item we are getting ready to add to the collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._pageIndex">
            <summary>
            Private accessor for the PageIndex
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._sortDescriptions">
            <summary>
            Private accessor for the SortDescriptions
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._sourceCollection">
            <summary>
            Private accessor for the SourceCollection
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._temporaryGroup">
            <summary>
            Private accessor for the Grouping data on the entire collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._timestamp">
            <summary>
            Timestamp used to see if there was a collection change while 
            processing enumerator changes
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView._totalItemCount">
            <summary>
            Private accessor for TotalItemCount. Represents the total number of items in the 
            source collection, or -1 if the total number is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.#ctor(System.Windows.Controls.DomainDataSourceEntityCollection,System.Action)">
            <summary>
            Initializes a new instance of the EntityCollectionView class.
            </summary>
            <param name="source">The source for the collection</param>
            <param name="deferRefreshDisposedCallback">The method to call when DeferRefresh is disposed</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            CommitNew or CancelNew should be called to complete the transaction.
            </summary>
            <returns>The new item we are adding</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CancelNew">
            <summary>
            Complete the transaction started by AddNew. The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CommitNew">
            <summary>
            Complete the transaction started by AddNew. We follow the WPF
            convention in that the view's sort, filter, and paging
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            </summary>
            <param name="item">The item we are checking to see whether it is within the collection</param>
            <returns>Boolean value of whether or not the collection contains the item</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle.
            Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>IDisposable used to notify that we no longer need to defer, when we dispose</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either CommitEdit or CancelEdit.  Any changes made 
            to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <param name="item">Item we want to edit</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.GetEnumerator">
            <summary> 
            Implementation of IEnumerable.GetEnumerator().
            This provides a way to enumerate the members of the collection
            without changing the currency.
            </summary>
            <returns>IEnumerator for the collection</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Interface Implementation for GetEnumerator()
            </summary>
            <returns>IEnumerator that we get from our internal collection</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this EntityCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if index is out of range
            </exception>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>Item at specified index</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given item appears, or -1 if doesn't appear.
            </summary>
            <param name="item">Item we are searching for</param>
            <returns>Index of specified item</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentTo(System.Object)">
            <summary> 
            Move to the given item. 
            </summary>
            <param name="item">Item we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToFirst">
            <summary> 
            Move to the first item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToLast">
            <summary> 
            Move to the last item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToNext">
            <summary> 
            Move to the next item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move CurrentItem to this index
            </summary>
            <param name="position">Position we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveCurrentToPrevious">
            <summary> 
            Move to the previous item. 
            </summary>
            <returns>True if the resulting CurrentItem is an item within the view; otherwise False</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection. It
            needs to be in the current filtered, sorted, and paged view
            to call this.
            </summary>
            <param name="item">Item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (filtered, sorted,
            and paged list).
            </summary>
            <param name="index">Index of the item we want to remove</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AdjustCurrencyForAdd(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.AdjustCurrencyForRemove(System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            The index can be -1 if the item was removed from a previous page
            </summary>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CheckFlag(System.Windows.Data.EntityCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called either when the page is local or when the paged source collection
            notified this EntityCollectionView of a page move completion.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by CommitNew, CancelNew, and when the
            new item is removed by Remove or Refresh.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.EndDefer">
            <summary>
            Subtracts from the deferLevel counter and calls Refresh() if there are no other defers
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InternalIndexOf(System.Object)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The item we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.NotifyPageChanged(System.Int32)">
            <summary>
            Method to be called by DomainDataSourceEntityCollection when the page is changed
            </summary>
            <param name="newPageIndex">The new page index being moved to.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via ICollectionView.CurrentChanging event) if it's OK to change currency
            </summary>
            <returns>False if a listener cancels the change, True otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notify listeners that this View has changed
            </summary>
            <remarks>
                CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
                into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
                The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanged">
            <summary>
            Raises the CurrentChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanging">
            <summary>
            Raise a CurrentChanging event that is not cancelable.
            This is called by CollectionChanges (Add, Remove, and Refresh) that 
            affect the CurrentItem.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the CurrentChanging event
            </summary>
            <param name="args">
                CancelEventArgs used by the consumer of the event.  args.Cancel will
                be true after this call if the CurrentItem should not be changed for
                any reason.
            </param>
            <exception cref="T:System.InvalidOperationException">
                This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">PropertyChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event.
            </summary>
            <param name="propertyName">Property name for the property that changed</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareGroupingComparer(System.Windows.Data.CollectionViewGroupRoot)">
            <summary>
            Sets up the ActiveComparer for the CollectionViewGroupRoot specified
            </summary>
            <param name="groupRoot">The CollectionViewGroupRoot</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            This assumes that there is no paging, so we just group the entire collection
            of items that the CollectionView holds.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareTemporaryGroups">
            <summary>
            Use the GroupDescriptions to place items into their respective groups.
            Because of the fact that we have paging, it is possible that we are only
            going to need a subset of the items to be displayed. However, before we 
            actually group the entire collection, we can't display the items in the
            correct order. We therefore want to just create a temporary group with
            the entire collection, and then using this data we can create the group
            that is exposed with just the items we need.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareGroupsForCurrentPage">
            <summary>
            Update our Groups private accessor to point to the subset of data
            covered by the current page, or to display the entire group if paging is not
            being used.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.PrepareLocalArray(System.Collections.IEnumerable)">
            <summary>
            Create and sort the local index array.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> containing the items.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessAddEvent(System.Object,System.Int32)">
            <summary>
            Process an Add operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="addedItem">Item added to the source collection</param>
            <param name="addIndex">Index item was added into</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process CollectionChanged event on source collection 
            that implements INotifyCollectionChanged.
            </summary>
            <param name="args">
            The NotifyCollectionChangedEventArgs to be processed.
            </param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessRemoveEvent(System.Object,System.Boolean)">
            <summary>
            Process a Remove operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="removedItem">Item removed from the source collection</param>
            <param name="isReplace">Whether this was part of a Replace operation</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ProcessInsertToCollection(System.Object,System.Int32)">
            <summary>
            Handles adding an item into the collection, and applying sorting, filtering, grouping, paging.
            </summary>
            <param name="item">Item to insert in the collection</param>
            <param name="index">Index to insert item into</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaiseCurrencyChanges(System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises Currency Change events
            </summary>
            <param name="fireChangedEvent">Whether to fire the CurrentChanged event even if the params have not changed</param>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldCurrentPosition">CurrentPosition before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RefreshInternal">
            <summary>
            Will call RefreshOverride and clear the NeedsRefresh flag
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RefreshOrDefer">
            <summary>
            Refresh, or mark that refresh is needed when defer cycle completes.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RefreshOverride">
            <summary>
            Re-create the view, using any SortDescriptions. 
            Also updates currency information.
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.ResetCurrencyValues(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use null.
            </summary>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrent(System.Object,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should use this method to update
            the Current values.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call
            any virtuals.  The 'count' parameter is substitute for the real Count,
            used only when newItem is null.
            In that case, this method sets IsCurrentAfterLast to true if and only
            if newPosition >= count.  This distinguishes between a null belonging
            to the view and the dummy null when CurrentPosition is past the end.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.RequestPageMove(System.Int32)">
            <summary>
            Requests a page move to the potential paged source collection.
            Completes the move if that paged source does not initiate a move
            (because the data is already local) or if the source is not paged.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetFlag(System.Windows.Data.EntityCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SetSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh EntityCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SourceCollection_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the source collection raises its PropertyChanged event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> used in the event.</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.UpdateItemPosition(System.Object,System.Boolean)">
            <summary>
            Update an item's position based on sorting and grouping.  If the item was
            the <see cref="P:System.Windows.Data.EntityCollectionView.CurrentItem"/> then maintain the currency on that item in
            its potentially new position.
            </summary>
            <param name="item">The item to update position for.</param>
            <param name="isEditOperation"><c>true</c> if the <paramref name="item"/> was just edited,
            <c>false</c> if the <paramref name="item"/> was added.  If the <paramref name="item"/>
            was added previously and is now being edited, specify <c>true</c>.</param>
            <remarks>
            When <paramref name="isEditOperation"/> is <c>true</c>, we will perform an
            exhaustive search through the groups to find the <paramref name="item"/>.  This is required
            if the <paramref name="item"/> was already grouped based on original values.  When
            <paramref name="isEditOperation"/> is <c>false</c>, we assume the item is the last
            item in the group because it was newly added to the group.
            </remarks>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Helper to validate that we are not in the middle of a DeferRefresh
            and throw if that is the case.
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CollectionChanged">
            <summary>
            Raise this event when the (filtered) view changes
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per INotifyCollectionChanged).
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CurrentChanged">
            <summary>
            Raised when the CurrentItem property changed
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.CurrentChanging">
            <summary>
            Raised when the CurrentItem property is changing
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="E:System.Windows.Data.EntityCollectionView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per INotifyPropertyChanged)
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports AddNew and that
            we can presently add a new item.
            </summary>
            <value>
            <c>true</c> if we are not presently editing an item and the source EntityList
            supports Add.
            </value>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion of "pending changes" 
            on the current edit item.  Since we know we're always working against an Entity,
            we know that it supports IEditableObject, so we can always return true.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change.
            </summary>
            <value>
            This is only false when we have a pending edit that hasn't been committed.
            It's okay to have changes that haven't been submitted though.
            </value>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanFilter">
            <summary>
            Gets a value indicating whether we support filtering with this ICollectionView.
            </summary>
            <remarks>
            This will always return <c>false</c> because EntityCollectionView doesn't support
            predicate filters.  <see cref="T:System.Windows.Data.FilterDescriptor"/>s are used instead.
            </remarks>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports Remove and RemoveAt.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CanSort">
            <summary>
            Gets a value indicating whether we support sorting with this ICollectionView.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Culture">
            <summary>
            Gets or sets Culture to use during sorting.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentAddItem">
            <summary>
            Gets the new item when an AddNew transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentEditItem">
            <summary>
            Gets the affected item when an EditItem transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentItem">
            <summary> 
            Gets the "current item" for this view 
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.CurrentPosition">
            <summary>
            Gets the ordinal position of the CurrentItem within the 
            (optionally sorted and filtered) view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Filter">
            <summary>
            Gets or sets the Filter, which is a callback set by the consumer of the ICollectionView
            and used by the implementation of the ICollectionView to determine if an
            item is suitable for inclusion in the view.
            </summary>
            <remarks>
            This implementation does not support filtering. Instead, filters can be set using
            <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support filtering and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.EntityCollectionView.CanFilter"/> property to test if filtering is supported before
            assigning a non-null value.
            </exception>
            <seealso cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.GroupDescriptions">
            <summary>
            Gets the description of grouping, indexed by level.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Groups">
            <summary>
            Gets the top-level groups, constructed according to the descriptions
            given in GroupDescriptions.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an "AddNew" transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentAfterLast">
            <summary> 
            Gets a value indicating whether currency is beyond the end (End-Of-File). 
            </summary>
            <returns>Whether IsCurrentAfterLast</returns>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentBeforeFirst">
            <summary> 
            Gets a value indicating whether currency is before the beginning (Beginning-Of-File). 
            </summary>
            <returns>Whether IsCurrentBeforeFirst</returns>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an EditItem transaction is in progress.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.ItemCount">
            <summary>
            Gets a count of items known to be in the source collection after filtering
            is applied, but before paging.
            </summary>
            <remarks>
            Value is based on the number of items that have been loaded and what pages
            those items were loaded into.  If <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 0 or 1 were never
            loaded, but <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 2 was loaded successfully, then
            we can assume that page indexes of 0 and 1 exist and are full.
            </remarks>
            <example>
            While on <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> of 2 (the 3rd page), with <see cref="P:System.Windows.Data.EntityCollectionView.PageSize"/>
            of 5, and the page having 5 items, the return value will be at least 15.
            <para>
            If the <see cref="P:System.Windows.Data.EntityCollectionView.PageIndex"/> has been greater than 2 previously, we know that items
            exist beyond the 3rd page, so the return value could be greater than 15.
            </para>
            </example>
            <seealso cref="P:System.Windows.Data.EntityCollectionView.TotalItemCount"/>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.NeedsRefresh">
            <summary>
            Gets a value indicating whether this view needs to be refreshed.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets whether to include a placeholder for a new item, and if so,
            where to put it. Only the value NewItemPlaceholderPosition.None is supported.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SortDescriptions">
            <summary>
            Gets the Sort criteria to sort items in collection.
            </summary>
            <remarks>
            <p>
            Clear a sort criteria by assigning SortDescription.Empty to this property.
            One or more sort criteria in form of <seealso cref="T:System.ComponentModel.SortDescription"/>
            can be used, each specifying a property and direction to sort by.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support sorting and will throw a NotSupportedException.
            Use <seealso cref="P:System.Windows.Data.EntityCollectionView.CanSort"/> property to test if sorting is supported before adding
            to SortDescriptions.
            </exception>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceCollection">
            <summary>
            Gets the source of the IEnumerable collection we are using for our view.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            When the SourceCollection implements IPagedCollection, the provider of the source collection is in
            charge of setting this value. In those cases, the value can be temporary only. That is
            the provider can set TotalItemCount to a positive number or -1 based on its latest information, but 
            that may no longer reflect the reality at a later time, given the fact that the source
            may not be of a fixed length.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there
            is still an outstanding DeferRefresh in
            use.  If at all possible, derived classes
            should not call Refresh if IsRefreshDeferred
            is true.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsDeferRefreshUnwinding">
            <summary>
            Whether or not a DeferRefresh is currently unwinding
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether CurrentItem and CurrentPosition are
            up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.NeedToMoveToPreviousPage">
            <summary>
            Gets whether the current page is empty and we need
            to move to a previous page.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.PageCount">
            <summary>
            Gets the number of pages we currently have
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.RootGroup">
            <summary>
            Gets the root of the Group that we expose to the user
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceEditableCollection">
            <summary>
            Gets the EntityList that serves as the source of our DomainDataSourceEntityCollection,
            returning it as an IEditableCollection.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SourceList">
            <summary>
            Gets the SourceCollection as an IList
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Timestamp">
            <summary>
            Gets Timestamp used by the PlaceholderAwareEnumerator to determine if a
            collection change has occurred since the enumerator began.  (If so,
            MoveNext should throw.)
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data 
            is needed for sorting, filtering, and paging. We want any deriving 
            classes to also be able to access this value to see whether or not 
            to use the default source collection, or the internal list.
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.RequestPageMoveDelegate">
            <summary>
            Delegate used to asynchronously trigger a page move.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsCurrentBeforeFirst">
            <summary>
            Whether the current item is before the first
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsCurrentAfterLast">
            <summary>
            Whether the current item is after the last
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.NeedsRefresh">
            <summary>
            Whether we need to refresh
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after EndDefer
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after EndDefer
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.DeferHelper">
            <summary>
            Used to keep track of Defer calls on the EntityCollectionView, which
            will prevent the user from calling Refresh() on the view. In order
            to allow refreshes again, the user will have to call IDisposable.Dispose,
            to end the Defer operation.
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.DeferHelper.collectionView">
            <summary>
            Private reference to the CollectionView that created this DeferHelper
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferHelper.#ctor(System.Windows.Data.EntityCollectionView)">
            <summary>
            Initializes a new instance of the DeferHelper class
            </summary>
            <param name="collectionView">CollectionView that created this DeferHelper</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.DeferHelper.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator">
            <summary>
            IEnumerator generated using the new item taken into account
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.#ctor(System.Windows.Data.EntityCollectionView,System.Collections.IEnumerator,System.Object)">
            <summary>
            Initializes a new instance of the PlaceholderAwareEnumerator class.
            </summary>
            <param name="collectionView">The EntityCollectionView we are creating the enumerator for</param>
            <param name="baseEnumerator">The baseEnumerator that we pass in</param>
            <param name="newItem">The new item we are adding to the collection</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.MoveNext">
            <summary>
            Implements the MoveNext function for IEnumerable
            </summary>
            <returns>Whether we can move to the next item</returns>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.Reset">
            <summary>
            Implements the Reset function for IEnumerable
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator._collectionView">
            <summary>
            CollectionView that we are creating the enumerator for
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator._baseEnumerator">
            <summary>
            The Base Enumerator that we are passing in
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator._position">
            <summary>
            The position we are appending items to the enumerator
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator._newItem">
            <summary>
            Reference to any new item that we want to add to the collection
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator._timestamp">
            <summary>
            Timestamp to let us know whether there have been updates to the collection
            </summary>
        </member>
        <member name="P:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.Current">
            <summary>
            Gets the Current value for IEnumerable
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.Position.BeforeNewItem">
            <summary>
            Whether the position is before the new item
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.Position.OnNewItem">
            <summary>
            Whether the position is on the new item that is being created
            </summary>
        </member>
        <member name="F:System.Windows.Data.EntityCollectionView.NewItemAwareEnumerator.Position.AfterNewItem">
            <summary>
            Whether the position is after the new item
            </summary>
        </member>
        <member name="T:System.Windows.Data.EntityCollectionView.SortFieldComparer">
            <summary>
            IComparer class to sort by class property value (using reflection).
            </summary>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.#ctor(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Create a comparer, using the SortDescription and a Type;
            tries to find a reflection PropertyInfo for each property name
            </summary>
            <param name="sortFields">list of property names and direction to sort by</param>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the list of property names and directions.
            </remarks>
        </member>
        <member name="M:System.Windows.Data.EntityCollectionView.SortFieldComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="T:System.ComponentModel.EntityCollectionViewResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.CancelEditNotSupported">
            <summary>
              Looks up a localized string similar to CancelEdit is not supported for the current edit item..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.CannotFilter">
            <summary>
              Looks up a localized string similar to The Filter property is not supported by this implementation. Use DomainDataSource.FilterDescriptors to filter the dataset instead..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.ChangingPageSizeNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to Changing the PageSize is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.EditItemNotSupportedByEditableCollection">
            <summary>
              Looks up a localized string similar to Editing items is not supported by the IEditableCollection..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.EnumeratorVersionChanged">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.InvalidPageSize">
            <summary>
              Looks up a localized string similar to PageSize cannot be a negative value..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.NoCheckOrChangeWhenDeferred">
            <summary>
              Looks up a localized string similar to Cannot change or check the contents or Current position of the PagedCollectionView while Refresh is being deferred..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedDuringAddOrEdit">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during an AddNew or EditItem transaction..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedDuringTransaction">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed during a transaction begun by &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.OperationNotAllowedForView">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not allowed for this view..
            </summary>
        </member>
        <member name="P:System.ComponentModel.EntityCollectionViewResources.RemoveNotSupported">
            <summary>
              Looks up a localized string similar to Remove/RemoveAt is not supported..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadedDataEventArgs">
            <summary>
            Event arguments for the completion of a load operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadedDataEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ria.Data.Entity},System.Collections.Generic.IEnumerable{System.Windows.Ria.Data.Entity},System.Int32,System.Exception,System.Boolean,System.Object)">
            <summary>
            Public constructor
            </summary>
            <param name="entities">The loaded entities</param>
            <param name="allEntities">The loaded entities including those loaded as associations.</param>
            <param name="totalEntityCount">The total number of rows for the original query without any paging applied to it.</param>
            <param name="error">Exception for the load operation if it failed</param>
            <param name="canceled">True if the load operation was canceled, false otherwise</param>
            <param name="userState">Optional user state</param>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.Entities">
            <summary>
            Gets all the top level entities loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.AllEntities">
            <summary>
            Gets all the entities loaded, including any
            entities referenced by the top level entities.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadedDataEventArgs.TotalEntityCount">
            <summary>
            Gets the total server entity count for the query.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SubmittingChangesEventArgs">
            <summary>
            Event arguments for an in progress submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittingChangesEventArgs.#ctor(System.Windows.Ria.Data.EntityChangeSet,System.Object)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset being submitted</param>
            <param name="userState">Optional user state to be associated with the
            submit operation</param>
        </member>
        <member name="P:System.Windows.Controls.SubmittingChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.Data.EntityChangeSet"/> being submitted
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittingChangesEventArgs.UserState">
            <summary>
            Gets the user state associated with the submit operation
            </summary>
        </member>
        <member name="T:System.Windows.Data.ItemChangedEventArgs`1">
            <summary>
            Event args for the ItemChanged event raised by the ObservableItemCollection class
            </summary>
            <typeparam name="T">Type of the changed Item</typeparam>
        </member>
        <member name="M:System.Windows.Data.ItemChangedEventArgs`1.#ctor(`0,System.String)">
            <summary>
            ItemChangedEventArgs constructor
            </summary>
            <param name="item">Item that changed</param>
            <param name="propertyName">Item property that changed</param>
        </member>
        <member name="P:System.Windows.Data.ItemChangedEventArgs`1.Item">
            <summary>
            Gets the item that changed
            </summary>
        </member>
        <member name="P:System.Windows.Data.ItemChangedEventArgs`1.PropertyName">
            <summary>
            Gets the item property that changed
            </summary>
        </member>
        <member name="T:System.Windows.Data.ObservableItemCollection`1">
            <summary>
            ObservableCollection class that also raises notifications when one of its items changes
            The items in the collection need to implement INotifyPropertyChanged.
            </summary>
            <typeparam name="T">Type of the collection's items</typeparam>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index of the item to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index to set.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.OnItemChanged(System.Windows.Data.ItemChangedEventArgs{`0})">
            <summary>
            Called by the this class when an item has changed. Raises the ItemChanged event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Data.ItemChangedEventArgs`1"/> arguments.</param>
        </member>
        <member name="M:System.Windows.Data.ObservableItemCollection`1.Item_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property of an item has changed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="E:System.Windows.Data.ObservableItemCollection`1.ItemChanged">
            <summary>
            Event raised when an item in the collection changed
            </summary>
        </member>
        <member name="T:System.Windows.Common.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value that indicates whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            true if the converter can convert the provided type to an instance
            of a String or the expected type; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Common.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Common.TypeConverters.ConvertFromString``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Attempts to convert the specified text to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="text">The text being converted.</param>
            <param name="knownValues">
            Dictionary mapping known names to values.
            </param>
            <returns>
            The instance of the expected type created from the converted text.
            </returns>
        </member>
        <member name="T:System.Windows.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.ConvertFrom``1(System.Type,``0)">
            <summary>
            Attempts to convert a value from type <typeparamref name="T"/> to the type of <paramref name="sourceType"/>.
            </summary>
            <typeparam name="T">Type to convert from.</typeparam>
            <param name="sourceType">Type to attempt to convert to.</param>
            <param name="value">Value to attempt to convert.</param>
            <returns>A converted value of type <paramref name="sourceType"/> or null.</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested.
            Each element of the path needs to be a public instance property.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetOrSetNestedPropertyValue(System.Boolean,System.Object,System.Object@,System.String)">
            <summary>
            Gets or sets the value of a public instance property. The property can be nested. 
            </summary>
            <param name="set">Set to true to write the property value</param>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetOrSetNestedPropertyValue(System.Boolean,System.Object,System.Object@,System.String,System.Type)">
            <summary>
            Gets or sets the value of a public instance property. The property can be nested. 
            </summary>
            <param name="set">Set to true to write the property value</param>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Returns the PropertyInfo corresponding to the provided propertyPath. The propertyPath can be a dotted
            path where each section is a public property name. Only public instance properties are searched for.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The found PropertyInfo or null otherwise</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> extended by this method.</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.GetTypeConverters(System.Type)">
            <summary>
            Returns an array of Types registered as TypeConverters for a given type.
            </summary>
            <param name="type">Type to look for a TypeConverter for.</param>
            <returns>An array of Types containing TypeConverter types.</returns>
        </member>
        <member name="M:System.Windows.Common.TypeHelper.SetNestedPropertyValue(System.Object,System.Object,System.String)">
            <summary>
            Sets the value of a property. That property can be nested. 
            Only works on public instance properties.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="value">Property value</param>
            <param name="propertyPath">Property path</param>
            <returns>Potential exception</returns>
        </member>
        <member name="T:System.Windows.Controls.LinqHelper">
            <summary>
            Utility class used for all Linq-related tasks
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFilterExpression(System.Globalization.CultureInfo,System.Type,System.String,System.Windows.Data.FilterOperator,System.Object,System.Boolean,System.Linq.Expressions.Expression@)">
            <summary>
            Produces the Linq expression that represents a particular FilterDescriptor
            </summary>
            <param name="culture">Culture used for error message of returned exception</param>
            <param name="type">Entity type</param>
            <param name="propertyPath">Left operand: Property on the entity type</param>
            <param name="filterOperator">One of the FilterOperator enum value</param>
            <param name="value">Right operand</param>
            <param name="isCaseSensitive">Boolean that specifies if the string operations are case sensitive or not</param>
            <param name="filterExpression">Resulting linq expression when success</param>
            <returns>Exception in case of failure. Null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildFiltersExpression(System.Globalization.CultureInfo,System.Type,System.Windows.Data.FilterDescriptorCollection,System.Linq.Expressions.Expression@)">
            <summary>
            Produces the Linq expression representing the entire filter descriptors collection.
            </summary>
            <param name="culture">Culture used for error message of returned exception</param>
            <param name="type">Entity type</param>
            <param name="filterDescriptors">Collection of filters</param>
            <param name="filtersExpression">Produced linq expression in case of success</param>
            <returns>Exception in case of failure. Null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildGroupsExpression(System.Type,System.Windows.Data.GroupDescriptorCollection)">
            <summary>
            Generates the PropertyExpression of the GroupDescriptor collection items
            </summary>
            <param name="type">Entity type</param>
            <param name="groupDescriptors">Group descriptors</param>
            <returns>True in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildPropertyExpression(System.Type,System.String,System.Linq.Expressions.Expression@)">
            <summary>
            Builds the Linq Expression for the provided propertyPath and type properties
            </summary>
            <param name="type">Type that exposes the property</param>
            <param name="propertyPath">Public property. Can be nested.</param>
            <param name="propertyExpression">Resulting property expression</param>
            <returns>Exception in case of error, null in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.BuildSortsExpression(System.Type,System.Windows.Data.SortDescriptorCollection)">
            <summary>
            Generates the PropertyExpression of the SortDescriptor collection items
            </summary>
            <param name="type">Entity type</param>
            <param name="sortDescriptors">Sort descriptors</param>
            <returns>True in case of success</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GetEntityQueryMethod(System.String)">
            <summary>
            Gets an <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> method by the specified name.
            </summary>
            <param name="methodName">The name of the method to find and return.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> from <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/>
            that matches the specified name, is generic, with 2 parameters, and accepting
            and <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> as the first parameter.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.Windows.Ria.Data.EntityQuery,System.Windows.Data.GroupDescriptorCollection,System.Windows.Data.SortDescriptorCollection)">
            <summary>
            Composes an <see cref="T:System.Windows.Ria.Data.EntityQuery"/> for sorting and grouping purposes.
            </summary>
            <param name="source">The queryable source.</param>
            <param name="groupDescriptors">The group descriptors.</param>
            <param name="sortDescriptors">The sort descriptors.</param>
            <returns>The composed <see cref="T:System.Windows.Ria.Data.EntityQuery"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.OrderBy(System.Windows.Ria.Data.EntityQuery,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Compose an OrderBy, ThenBy, OrderByDescending, or ThenByDescending clause onto an EntityQuery.
            </summary>
            <param name="source">The source EntityQuery</param>
            <param name="orderMethodName">The order method name to use: OrderBy, ThenBy, OrderByDescending, or ThenByDescending.</param>
            <param name="sortExpression">The expression to use for sorting.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Skip(System.Windows.Ria.Data.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Skip operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to skip.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Take(System.Windows.Ria.Data.EntityQuery,System.Int32)">
            <summary>
            Modifies the provided EntityQuery to perform a Take operation.
            </summary>
            <param name="source">The EntityQuery to compose.</param>
            <param name="count">The number of items to take.</param>
            <returns>The composed EntityQuery.</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.Where(System.Windows.Ria.Data.EntityQuery,System.Linq.Expressions.Expression)">
            <summary>
            Modifies the provided EntityQuery to restrict the result set according to the <paramref name="filtersExpression"/> argument.
            </summary>
            <param name="source">EntityQuery to modify.</param>
            <param name="filtersExpression">Expression representing the filter to apply.</param>
            <returns>Composed EntityQuery</returns>
        </member>
        <member name="M:System.Windows.Controls.LinqHelper.GenerateProperty(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Generates a Linq property expression given a type and a property path
            </summary>
            <param name="type">Type that contains the property provided</param>
            <param name="propertyPath">Property path that can be dotted or not.</param>
            <param name="instance">Root expression</param>
            <returns>Resulting property expression if path is valid. Null otherwise.</returns>
        </member>
        <member name="T:System.Windows.Controls.LoadErrorEventArgs">
            <summary>
            Event arguments used for the DomainDataSource's LoadError event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadErrorEventArgs.#ctor(System.Exception,System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object},System.Collections.Generic.Dictionary{System.Windows.Data.Parameter,System.Object})">
            <summary>
            LoadErrorEventArgs constructor
            </summary>
            <param name="exception">Exception thrown during the asynchronous load operation</param>
            <param name="modifiedFilterParameters">Filter parameter changes that caused the asynchronous load operation</param>
            <param name="modifiedLoadParameters">Load parameter changes that caused the asynchronous load operation</param>
        </member>
        <member name="P:System.Windows.Controls.LoadErrorEventArgs.Exception">
            <summary>
            Gets the Exception thrown during an asynchronous load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadErrorEventArgs.ModifiedFilterParameters">
            <summary>
            Gets the set of filter parameters changes that have caused the failed load operation.
            The keys represent the Value properties of the FilterDescriptor instances
            that caused the load operation.
            The values represent the original Value of those Parameter instances.
            This property can be used to restore the original values of the filter parameters, as they were
            before the load operation was initiated.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadErrorEventArgs.ModifiedLoadParameters">
            <summary>
            Gets the set of load parameters changes that have caused the failed load operation.
            The keys represent the Parameter instances of the LoadParameters collection that caused the load operation.
            The values represent the original Value of those Parameter instances.
            This property can be used to restore the original values of the load parameters, as they were
            before the load operation was initiated.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LoadingDataEventArgs">
            <summary>
            Event arguments used for the DomainDataSource's Loading event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LoadingDataEventArgs.#ctor(System.Windows.Ria.Data.EntityQuery,System.Windows.Ria.Data.MergeOption)">
            <summary>
            Internal LoadingDataEventArgs constructor
            </summary>
            <param name="query">Default query that will be used for the load operation</param>
            <param name="mergeOption">Default merge option that will be used for the load operation</param>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.MergeOption">
            <summary>
            Gets or sets the merge option applied to this load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.Query">
            <summary>
            Gets or sets the entity query executed remotely
            </summary>
        </member>
        <member name="P:System.Windows.Controls.LoadingDataEventArgs.RestoreLoadSettings">
            <summary>
            Gets or sets a value indicating whether the DomainDataSource restores the 
            load/filter/sort/group settings to the state they were at the last successful 
            load operation. This restoration only occurs when both e.Cancel and
            e.RestoreLoadSettings are set to True.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource">
            <summary>
            DomainDataSource component operates on a source object in order to load, filter, group and sort collections
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.QueryNameSuffix">
            <summary>
            The preferred query name suffix to be added to
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> values as needed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.AutoLoadProperty">
            <summary>
            The DependencyProperty for the AutoLoad property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataProperty">
            <summary>
            The DependencyProperty for the Data property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DataViewProperty">
            <summary>
            The DependencyProperty for the DataView property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.DomainContextProperty">
            <summary>
            The DependencyProperty for the DomainContext property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.HasChangesProperty">
            <summary>
            The DependencyProperty for the HasChanges property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsBusyProperty">
            <summary>
            The DependencyProperty for the IsBusy property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsLoadingDataProperty">
            <summary>
            The DependencyProperty for the IsLoadingData property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.IsSubmittingChangesProperty">
            <summary>
            The DependencyProperty for the IsSubmittingChanges property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadDelayProperty">
            <summary>
            The DependencyProperty for the LoadDelay property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadIntervalProperty">
            <summary>
            The DependencyProperty for the LoadInterval property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadSizeProperty">
            <summary>
            The DependencyProperty for the LoadSize property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.PageSizeProperty">
            <summary>
            The DependencyProperty for the PageSize property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.RefreshIntervalProperty">
            <summary>
            The DependencyProperty for the RefreshInterval property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadContext">
            <summary>
            Represents the characteristics of the latest load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentLoadOperation">
            <summary>
            Represents the pending load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource._currentSubmitOperation">
            <summary>
            Represents the current submit operation requested of the DomainContext.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.#ctor">
            <summary>
            Parameter-less constructor for the DomainDataSource class
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.AreGroupDescriptionAndDescriptorEquivalent(System.Windows.Data.PropertyGroupDescription,System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Determines if a GroupDescription and GroupDescriptor are equivalent.
            </summary>
            <param name="groupDescription">GroupDescription to compare</param>
            <param name="groupDescriptor">GroupDescriptor to compare</param>
            <param name="exception">Exception that may occur during the comparison</param>
            <returns>True if the two are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.AreSortDescriptionAndDescriptorEquivalent(System.ComponentModel.SortDescription,System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Determines if a SortDescription and SortDescriptor are equivalent.
            </summary>
            <param name="sortDescription">SortDescription to compare</param>
            <param name="sortDescriptor">SortDescriptor to compare</param>
            <param name="exception">Exception that may occur during the comparison</param>
            <returns>True if the two are equivalent</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckQueryParameter(System.Windows.Data.Parameter)">
            <summary>
            Check the validity of a query parameter instance, in particular it makes sure the ParameterName string is not empty.
            </summary>
            <param name="queryParameter">The query parameter.</param>
            <returns>Potential exception to report.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Data is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DataProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DataViewPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DataView is changed
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DataViewProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DomainContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DomainContext is changed
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the DomainContextProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetGroupDescriptionFromDescriptor(System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Creates a GroupDescription based on a GroupDescriptor.
            </summary>
            <param name="groupDescriptor">GroupDescriptor to convert</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Resulting GroupDescription</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetGroupDescriptorPropertyPath(System.Windows.Data.GroupDescriptor,System.Exception@)">
            <summary>
            Returns the property path of a GroupDescriptor converted into a string.
            </summary>
            <param name="groupDescriptor">GroupDescriptor to look up</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Extracted property path</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetEntityQueryEntityType(System.Type)">
            <summary>
            Extracts the <see cref="T:System.Type"/> T from a <paramref name="type"/> of <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> of T,
            where T derives from <see cref="T:System.Windows.Ria.Data.Entity"/>.
            </summary>
            <param name="type">The <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> type.</param>
            <returns>The <see cref="T:System.Type"/> of T when the type is <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> of T and
            T derives from <see cref="T:System.Windows.Ria.Data.Entity"/>, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MethodParametersMatchQueryParameters(System.Reflection.MethodInfo,System.Windows.Data.ParameterCollection)">
            <summary>
            Determine if a method's parameter names match the query parameter names of a <see cref="T:System.Windows.Data.ParameterCollection"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> whose parameters to check.</param>
            <param name="queryParameters">The <see cref="T:System.Windows.Data.ParameterCollection"/> to check against.</param>
            <returns><c>true</c> when every parameter name is matched up, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptionFromDescriptor(System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Creates a SortDescription based on a SortDescriptor.
            </summary>
            <param name="sortDescriptor">SortDescriptor to convert</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Resulting SortDescription</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptorPropertyPath(System.Windows.Data.SortDescriptor,System.Exception@)">
            <summary>
            Returns the property path of a SortDescriptor converted into a string.
            </summary>
            <param name="sortDescriptor">SortDescriptor to look up</param>
            <param name="exception">Potential exception thrown during conversion</param>
            <returns>Extracted property path</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HasChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when HasChanges is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the HasChangedProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsBusyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsBusy is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsBusyProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsLoadingDataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsLoadingData is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsLoadingDataProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.IsSubmittingChangesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsSubmittingChanges is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the IsSubmittingChangesProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDelayPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadDelay is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadDelayProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadInterval is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadIntervalProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LoadSize is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the LoadSizeProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PageSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when PageSize is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the PageSizeProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when RefreshInterval is changed.
            </summary>
            <param name="depObj">The event sender.</param>
            <param name="e">The event arguments describing the changes to the RefreshIntervalProperty.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoad">
            <summary>
            Cancels the current load operation performed by this DomainDataSource, if any
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelLoadPrivate">
            <summary>
            Cancels the current load operation performed by this DomainDataSource, if any
            </summary>
            <returns>Potential exception raised by DomainContext</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CancelSubmit">
            <summary>
            Cancels the current submit operation performed by this DomainDataSource, if any
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckAutoLoad(System.Boolean,System.Boolean)">
            <summary>
            When <see cref="P:System.Windows.Controls.DomainDataSource.AutoLoad"/> is <c>true</c>, this method will call
            <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.DomainDataSource.LoadType)"/> either synchronously or asynchronously
            once the control has been loaded.  If the control hasn't been loaded,
            set <see cref="F:System.Windows.Controls.DomainDataSource._isAutoLoadDelayed"/> to <c>true</c> so that we know to
            call this method again once the control has loaded.
            </summary>
            <param name="synchronous">Whether or not to call
            <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.DomainDataSource.LoadType)"/> synchronously.</param>
            <param name="resetModifiedParameters">See <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.DomainDataSource.LoadType)"/>.</param>
            <returns>Either <c>null</c> or an exception returned from
            <see cref="M:System.Windows.Controls.DomainDataSource.ExecuteLoad(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Windows.Controls.DomainDataSource.LoadType)"/>.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckFilterDescriptor(System.Windows.Data.FilterDescriptor)">
            <summary>
            Checks the validity of a FilterDescriptor instance.
            </summary>
            <param name="filterDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckGroupDescriptor(System.Windows.Data.GroupDescriptor)">
            <summary>
            Checks the validity of a GroupDescriptor instance, in particular the 
            validity of its PropertyPath property.
            </summary>
            <param name="groupDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.CheckSortDescriptor(System.Windows.Data.SortDescriptor)">
            <summary>
            Checks the validity of a SortDescriptor instance, in particular the 
            validity of its PropertyPath property.
            </summary>
            <param name="sortDescriptor">Instance to validate</param>
            <returns>Potential exception - most likely an ArgumentException</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.DeferLoad">
            <summary>
            Used to prevent load operations from being triggered while
            changing multiple load characteristics.
            </summary>
            <returns>Disposible object that will trigger a load operation when disposed</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetEntityList(System.Reflection.PropertyInfo)">
            <summary>
            Configure the <see cref="T:System.Windows.Ria.Data.EntityList"/> used by the <see cref="T:System.Windows.Controls.DomainDataSourceEntityCollection"/>
            using the <paramref name="domainContextEntityListPropertyInfo"/>.
            </summary>
            <param name="domainContextEntityListPropertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> for
            the <see cref="T:System.Windows.Ria.Data.EntityList"/> in the <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> used by this
            <see cref="T:System.Windows.Controls.DomainDataSource"/>.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetFilterDescriptorsQuery(System.Windows.Ria.Data.EntityQuery,System.Boolean,System.Exception@)">
            <summary>
            Appends the query parameters that will filter the list on the server-side
            before bringing the data down.
            </summary>
            <param name="query">The query before the filter descriptions are applied.</param>
            <param name="allowThrow">Whether we will throw an exception or not when we encounter an issue.</param>
            <param name="exception">The exception that we pass up to the caller in case we encounter an issue.</param>
            <returns>The query for the load operation with the filter descriptors applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetQueryParameterValue(System.Reflection.ParameterInfo,System.Boolean,System.Windows.Data.Parameter@,System.Exception@)">
            <summary>
            Returns the current value of a query parameter. 
            </summary>
            <param name="pi">ParameterInfo associated with the load method argument</param>
            <param name="allowThrow">Indicates whether the top calling method is allowed to throw or if events should be raised instead</param>
            <param name="parameter">Parameter associated with the load method argument if found</param>
            <param name="exception">Potential exception that occurred during the value retrieval</param>
            <returns>Parameter value to use in the load operation</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetQueryParameterValues(System.Boolean,System.Exception@)">
            <summary>
            Returns an array of values to be used for the query parameters
            </summary>
            <param name="allowThrow">Indicates whether the top calling method is allowed to throw or if events should be raised instead</param>
            <param name="exception">Potential exception that occurred during the values retrieval</param>
            <returns>Array of <see cref="T:System.Windows.Data.Parameter"/> values to use in the load operation</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.GetSortDescriptorsQuery(System.Windows.Ria.Data.EntityQuery,System.Boolean,System.Exception@)">
            <summary>
            Appends the query parameters that will sort/group the list on the server-side
            before bringing the data down. Because we cannot actually pass in a grouping
            parameter, we just sort by the group information before sorting.
            </summary>
            <param name="query">The query before the sort descriptions are applied.</param>
            <param name="allowThrow">Whether we will throw an exception or not when we encounter an issue.</param>
            <param name="exception">The exception that we pass up to the caller in case we encounter an issue.</param>
            <returns>The query for the load operation with the sort descriptors applied.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleQueryParameterChange(System.Windows.Data.Parameter)">
            <summary>
            Called when a query parameter changed (except for Value changes
            for which load operations are enqueued) or was added/removed.
            </summary>
            <param name="parameter">The query parameter.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.HandleQueryParametersCollectionChange(System.Windows.Data.Parameter,System.Windows.Data.ParameterCollection)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> collection changes.
            </summary>
            <param name="queryParameter">parameter that was added or replaced</param>
            <param name="queryParameters">new collection when a reset action occurs</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeEntityCollectionView">
            <summary>
            Sets up the internal entity collection and the paged collection view
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeParameter(System.Windows.Data.Parameter,System.Boolean)">
            <summary>
            Provides this DomainDataSource instance as the context for
            the provided Parameter's usage.
            </summary>
            <param name="parameter">The Parameter instance to initialize</param>
            <param name="forceInit">Indicates whether the initialization needs to occur even when the DomainDataSource has not loaded yet</param>
            <returns>Potential exception thrown during the initialization</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.Load">
            <summary>
            Starts a load operation synchronously
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadData_Callback(System.Windows.Ria.Data.LoadOperation)">
            <summary>
            The callback used for the LoadOperation.
            </summary>
            <param name="loadOperation">The LoadOperation that has finished.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.MoveToPage(System.Int32)">
            <summary>
            Called when the paged collection view requests a new page index.
            </summary>
            <param name="pageIndex">Index of the requested page</param>
            <returns>True if an asynchronous page load was initiated</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.OnApplyTemplate">
            <summary>
            Called when a new template gets applied
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushGroupDescriptions(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the group descriptors in sync with the group descriptions.
            </summary>
            <param name="e">Change notification for the group descriptions</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushGroupDescriptors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the group descriptions in sync with the group descriptors.
            </summary>
            <param name="e">Change notification for the group descriptors</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushSortDescriptions(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the sort descriptors in sync with the sort descriptions.
            </summary>
            <param name="e">Change notification for the sort descriptions</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.PushSortDescriptors(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Brings the sort descriptions in sync with the sort descriptors.
            </summary>
            <param name="e">Change notification for the sort descriptors</param>
            <returns>Potential exception</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RaisePageChanged(System.Windows.Controls.DomainDataSource.LoadContext,System.Int32,System.Int32)">
            <summary>
            Notify the EntityCollectionView that the page move was completed.
            </summary>
            <param name="loadContext">Load characteristics</param>
            <param name="newStartPageIndex">Final Start Page Index</param>
            <param name="newPageIndex">Final Page Index</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RefreshLoadTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the tick event of the RefreshLoadTimer and will refresh the data
            that was previously loaded to the EntityCollectionView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.RejectChanges">
            <summary>
            Cancels the data changes that were performed by the underlying DomainContext
            </summary>
            <remarks>This cannot be called while there is a pending transaction on the <see cref="P:System.Windows.Controls.DomainDataSource.Data"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">When <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> is <c>null</c>
            or when <see cref="P:System.Windows.Controls.DomainDataSource.Data"/> has a pending Add or Edit transaction.</exception>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges">
            <summary>
            Starts a submit operation synchronously
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.SubmitChanges_Callback(System.Windows.Ria.Data.SubmitOperation)">
            <summary>
            The callback used for the SubmitOperation
            </summary>
            <param name="submitOperation">The SubmitOperation that raised this callback.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.InitializeParameters">
            <summary>
            Re-initializes the Parameter instances in the <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/>,
            <see cref="P:System.Windows.Controls.DomainDataSource.FilterDescriptors"/>, <see cref="P:System.Windows.Controls.DomainDataSource.SortDescriptors"/> and
            <see cref="P:System.Windows.Controls.DomainDataSource.GroupDescriptors"/> collections because of a <see cref="P:System.Windows.Controls.DomainDataSource.Culture"/> change for example.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.BuildFilterExpression(System.Globalization.CultureInfo,System.Type,System.String,System.Windows.Data.FilterOperator,System.Object,System.Boolean,System.Linq.Expressions.Expression@,System.Exception@)">
            <summary>
            Temporary debugging hook for testing filter expression generation
            </summary>
            <param name="culture">The CultureInfo to use in the filter expression.</param>
            <param name="type">The Type to use in the filter expression.</param>
            <param name="propertyPath">The property path to use in the filter expression.</param>
            <param name="filterOperator">The filter operator to use in the filter expression.</param>
            <param name="value">The value to use in the filter expression.</param>
            <param name="isCaseSensitive">Indicates whether or not to build the filter expression using case sensitivity.</param>
            <param name="filterExpression">A reference to the filter expression to update.</param>
            <param name="exception">A reference to the Exception to update if an error occurs.</param>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittedChanges">
            <summary>
            Event raised whenever an internal submit operation is completed
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadedData">
            <summary>
            Event raised whenever an internal load operation is completed
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadError">
            <summary>
            Event raised whenever an internal asynchronous load operation throws an exception
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.LoadingData">
            <summary>
            Event raised whenever an internal load operation is launched
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.ParameterError">
            <summary>
            Event raised whenever an exception is raised when processing a parameter
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSource.SubmittingChanges">
            <summary>
            Event raised whenever an internal submit operation is launched
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.AutoLoad">
            <summary>
            Gets or sets a value indicating whether automatic load operations occur whenever
            a characteristic changes that could result in a different result set
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Culture">
            <summary>
            Gets or sets the CultureInfo used for comparisons and conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.Data">
            <summary>
            Gets the entities resulting from a load operation
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DataView">
            <summary>
            Gets the collection view representing the loaded entities
            </summary>
            <remarks>
            The view presents the entities in a collection that implements the
            <see cref="T:System.ComponentModel.ICollectionView"/>, <see cref="T:System.ComponentModel.IEditableCollectionView"/>, and
            <see cref="T:System.ComponentModel.IPagedCollectionView"/> interfaces.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.DomainContext">
            <summary>
            Gets or sets the DomainContext instance used for executing the load and submit operations
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.FilterDescriptors">
            <summary>
            Gets or sets the collection of FilterDescriptor objects used to narrow down the result set
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.GroupDescriptors">
            <summary>
            Gets the collection of GroupDescriptor objects used to organize the items by groups
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.HasChanges">
            <summary>
            Gets a value indicating whether the items exposed by this DomainDataSource have pending changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.InitialLoadType">
            <summary>
            Gets the type of load operation required given the PageSize and LoadSise settings
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsBusy">
            <summary>
            Gets a value indicating whether the DomainDataSource is either loading data or submitting changes.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsLoadingData">
            <summary>
            Gets a value indicating whether the DomainDataSource is loading a result set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.IsSubmittingChanges">
            <summary>
            Gets a value indicating whether the DomainDataSource is submitting changes
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadDelay">
            <summary>
            Gets or sets the countdown before an automatic load operation is 
            launched. This countdown is applied at start up time, or when a filter value changes,
            or when a query parameter value changes. If two such changes occur within the countdown
            they are batched up and launch a single load operation.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadInterval">
            <summary>
            Gets or sets the pause duration between two successive load operations in 
            progressive load usages.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.LoadSize">
            <summary>
            Gets or sets the number of items to load everytime a load operation is executed.
            When equal to 0, there is no capping and all items are loaded 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.PageSize">
            <summary>
            Gets or sets the number of items exposed by the Data property. When equal to 0, paging
            is turned off and the number of items exposed by the Data property is illimited.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryName">
            <summary>
            Gets or sets the name of the query to use for loading.
            </summary>
            <remarks>
            The <see cref="P:System.Windows.Controls.DomainDataSource.DomainContext"/> will be searched for a method
            that returns an <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/>, with a name
            matching what is provided to <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>, with or
            without a "Query" suffix.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.QueryParameters">
            <summary>
            Gets the collection of <see cref="T:System.Windows.Data.Parameter"/> objects representing arguments of the
            <see cref="T:System.Windows.Ria.Data.EntityQuery`1"/> referenced by <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshInterval">
            <summary>
            Gets or sets the duration between two consecutive refresh load operations.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.RefreshLoadTimer">
            <summary>
            Gets a reference to the timer we keep for refreshing the loaded data. If it is null, we
            will create a new reference.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSource.SortDescriptors">
            <summary>
            Gets the collection of SortDescriptor objects used to sort the result set
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.LoadContext">
            <summary>
            Stores the characteristics of a load operation 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.DomainDataSource">
            <summary>
            The <see cref="F:System.Windows.Controls.DomainDataSource.LoadContext.DomainDataSource"/> that triggered the load.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.LoadSize">
            <summary>
            Value of the <see cref="!:DomainDataSource.LoadSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.LoadType">
            <summary>
            <see cref="F:System.Windows.Controls.DomainDataSource.LoadContext.LoadType"/> of the load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.PageSize">
            <summary>
            Value of the <see cref="!:DomainDataSource.PageSize"/> property for the load operation,
            at the time the load operation was initiated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.RaisePageChanged">
            <summary>
            Determines whether there is a pending page move. When <c>true</c>, the internal
            <see cref="T:System.Windows.Controls.DomainDataSourceEntityCollection"/> needs to notify the
            <see cref="T:System.Windows.Data.EntityCollectionView"/> of the page move's result.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.RequestedPageIndex">
            <summary>
            Potential page index requested via <see cref="M:System.Windows.Controls.DomainDataSourceEntityCollection.MoveToPage(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadContext.StartPageIndex">
            <summary>
            Value of the <see cref="P:System.Windows.Controls.DomainDataSourceEntityCollection.StartPageIndex"/> property for the load operation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.LoadDeferHelper">
            <summary>
            Class used to defer load operations via the DeferLoad() method
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDeferHelper.#ctor(System.Windows.Controls.DomainDataSource)">
            <summary>
            Constructor for the private LoadDeferHelper class
            </summary>
            <param name="domainDataSource">The DomainDataSource to be used with this helper class.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSource.LoadDeferHelper.Dispose">
            <summary>
            Called to dispose this instance
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.MethodAccessStatus">
            <summary>
            Enum used to indicate success or failure when trying to locate a method through reflection
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.Success">
            <summary>
            Load information is gathered successfully.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.InsufficientInput">
            <summary>
            Insufficient input for <see cref="M:System.Windows.Controls.DomainDataSource.GetEntityQueryInformation(System.Type,System.String,System.Windows.Data.ParameterCollection,System.Reflection.MethodInfo@,System.Reflection.PropertyInfo@,System.Type@)"/> method.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.NameNotFound">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/> not found.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.ArgumentMismatch">
            <summary>
            <see cref="P:System.Windows.Controls.DomainDataSource.QueryParameters"/> mismatch with the <see cref="P:System.Windows.Controls.DomainDataSource.QueryName"/>.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.EntityListNotFound">
            <summary>
            The <see cref="T:System.Windows.Ria.Data.EntityList`1"/> property couldn't be found
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.MethodAccessStatus.AmbiguousEntityList">
            <summary>
            There were multiple properties returning the expected <see cref="T:System.Windows.Ria.Data.EntityList`1"/> type
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSource.LoadType">
            <summary>
            Enum used to characterize the current load operation.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.None">
            <summary>
            Used for non-existing deferred load
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadAll">
            <summary>
            Loading all items in a single shot
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadFirstPages">
            <summary>
            Loading the first pages in a paging situation (occurs when PageSize becomes > 0)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadPreviousPages">
            <summary>
            Loading previous set of pages in a paging situation (occurs when PageIndex moves before current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadCurrentPages">
            <summary>
            Loading current set of pages in a paging situation (occurs with Refresh)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadNextPages">
            <summary>
            Loading next set of pages in a paging situation (occurs when PageIndex moves beyond current boundaries)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadLastPages">
            <summary>
            Loading last set of pages in a paging situation where PageIndex was set to a too large number
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadFirstItems">
            <summary>
            Loading first chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSource.LoadType.LoadNextItems">
            <summary>
            Loading next chunk of items in a progressive download situation
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceEntityCollection">
            <summary>
            Internal collection owned by the DomainDataSource and exposed to its PagedCollectionView.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._domainDataSource">
            <summary>
            Represents the owning DomainDataSource control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._itemCount">
            <summary>
            Represents the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._pageCount">
            <summary>
            The number of pages loaded.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._pageIndex">
            <summary>
            Represents the current page index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._pageSize">
            <summary>
            Represents the page size.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._pageTracking">
            <summary>
            Map of what entities are on what page indexes.  This is used to
            maintain page affinity as the collection is modified and pages
            are navigated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._raiseCollectionChangedEvents">
            <summary>
            Whether or not to raise collection changed events.  During a
            load operation, events are suppressed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._sourceEntityCollection">
            <summary>
            Underlying entity list
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._startPageIndex">
            <summary>
            Represents the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainDataSourceEntityCollection._totalItemCount">
            <summary>
            Represents the total number of items in the source collection, or -1 if that value is unknown.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.#ctor(System.Windows.Controls.DomainDataSource)">
            <summary>
            Default constructor
            </summary>
            <param name="domainDataSource">Owning DomainDataSource</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.ClearItems">
            <summary>
            Clear the items and raise a Reset CollectionChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.InsertItem(System.Int32,System.Windows.Ria.Data.Entity)">
            <summary>
            Track what page an item is inserted to.  If inserted to the current page,
            then insert the item to the underlying collection, otherwise just record
            its existence on another page.
            </summary>
            <param name="index">The desired index for insertion.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the underlying collection and raise the CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.SetItem(System.Int32,System.Windows.Ria.Data.Entity)">
            <summary>
            Update an item in the list and raise a CollectionChanged event.
            </summary>
            <param name="index">The index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.AddLoadedEntity(System.Windows.Ria.Data.Entity)">
            <summary>
            Adds a loaded entity into the collection, tracking the start page index
            that was used to load the entity.
            </summary>
            <param name="loadedEntity">The entity to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.BeginLoad">
            <summary>
            Indicates that a load is beginning and collection changed
            events should be suppressed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.Clear(System.Boolean)">
            <summary>
            Clear the collection, specifying whether or not it's being
            cleared for an initial load of entities.
            </summary>
            <param name="isInitialLoad">Indicates whether or not this clear
            is being done as part of an initial load of data.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.CompleteLoad">
            <summary>
            Indicate that a load has completed, raising a collection changed notification for the Reset
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.MoveToPage(System.Int32)">
            <summary>
            Transmits the request for a page move to the owning DomainDataSource.
            </summary>
            <param name="pageIndex">Requested page index</param>
            <returns>True if an asynchronous page move was initiated, False otherwise</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.NotifyPageChanged(System.Int32,System.Int32)">
            <summary>
            Updates the StartPageIndex property and notifies the EntityCollectionView of the change.
            </summary>
            <param name="startPageIndex">Final start page index</param>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.AddTrackedItems(System.Action{System.Windows.Ria.Data.Entity})">
            <summary>
            Ensures that any entities that have been recorded as on the current page
            are added to the collection.  When there are tracked items that need to be
            added, the specified <paramref name="addAction"/> is used to perform the add.
            </summary>
            <param name="addAction">The action to call for each entity that needs to be added.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.GetEntityPageTracking(System.Windows.Ria.Data.Entity)">
            <summary>
            Get the page tracking for an entity
            </summary>
            <param name="entity">The entity being tracked</param>
            <returns>A nullable int that represents the page the entity is being
            tracked against, or null if the entity is not being tracked against a page.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.HookupSourceCollectionChangeNotifications">
            <summary>
            Attaches to the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.InsertItemWithoutEvents(System.Int32,System.Windows.Ria.Data.Entity)">
            <summary>
            Insert an item without raising <see cref="E:System.Windows.Controls.DomainDataSourceEntityCollection.CollectionChanged"/> events.
            </summary>
            <param name="index">The index at which to add the item.</param>
            <param name="item">The <see cref="T:System.Windows.Ria.Data.Entity"/> to add.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies the consuming <see cref="P:System.Windows.Controls.DomainDataSourceEntityCollection.EntityCollectionView"/> of the provided source collection change.
            </summary>
            <param name="e">Event argument to use for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Notifies the consuming PagedCollectionView of a source collection change.
            </summary>
            <param name="action">Type of collection change</param>
            <param name="entity">Potential entity affected by the change</param>
            <param name="index">Index of that potential entity</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.SourceEntityList_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards the collection change notifications from the underlying EntityList to the consuming
            PagedCollectionView.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.TrackAddedItems(System.Collections.IList)">
            <summary>
            Tracks items that were added to the source entity list.  If an entity
            is being added after it was removed from our list, then we add it back.
            </summary>
            <param name="addedItems">The items that were added to the source entity list</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.TrackEntityPage(System.Windows.Ria.Data.Entity,System.Int32)">
            <summary>
            Track the page index that an entity is loaded or added onto
            </summary>
            <param name="entity">The <see cref="T:System.Windows.Ria.Data.Entity"/> for which the page needs to be tracked.</param>
            <param name="trackedPageIndex">The page index for the <paramref name="entity"/> being tracked.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.TrackRemovedItems(System.Collections.IList)">
            <summary>
            Track items that were removed from the source entity list.  If an entity
            is being removed and it's also in our list, then we remove it.
            </summary>
            <param name="removedItems">The list of items being removed from the collection.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainDataSourceEntityCollection.UnhookSourceCollectionChangeNotifications">
            <summary>
            Detaches from the source's INotifyPropertyChanged and INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceEntityCollection.PropertyChanged">
            <summary>
            Event exposed by the INotifyPropertyChanged interface
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DomainDataSourceEntityCollection.CollectionChanged">
            <summary>
            Occurs when this collection has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.EntityCollectionView">
            <summary>
            Gets or sets the <see cref="P:System.Windows.Controls.DomainDataSourceEntityCollection.EntityCollectionView"/> associated with this DomainDataSourceEntityCollection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.ItemCount">
            <summary>
            Gets a value indicating the minimum number of items known to be in the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.LoadedItemCount">
            <summary>
            Gets the count of non-new entities that are being tracked, starting with the start page index
            and ending based on our load size / page size (how many pages are loaded at once).
            <para>
            When paging is disabled, it just returns Count.
            </para>
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.PageCount">
            <summary>
            Gets or sets the number of pages loaded.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.PageIndex">
            <summary>
            Gets or sets the current page index
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.StartPageIndex">
            <summary>
            Gets the index of the first page of items provided by the source collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.TotalItemCount">
            <summary>
            Gets the total number of items in the source collection, 
            or -1 if that value is unknown.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.IsLastPage">
            <summary>
            Gets the total number of pages based on the <see cref="P:System.Windows.Controls.DomainDataSourceEntityCollection.TotalItemCount"/>
            and the <see cref="P:System.Windows.Controls.DomainDataSourceEntityCollection.PageSize"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.SourceEntityCollection">
            <summary>
            Gets or sets the source entity collection
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceEntityCollection.System#ComponentModel#IIndexableCollection#Item(System.Int32)">
            <summary>
            Returns the entity at the specified index
            </summary>
            <param name="index">index of entity to retrieve</param>
            <returns>The entity at the specified index</returns>
        </member>
        <member name="T:System.Windows.Controls.DomainDataSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelLoadOperation">
            <summary>
              Looks up a localized string similar to load cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CancelSubmitOperation">
            <summary>
              Looks up a localized string similar to submit cancelling.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotChangeSortDescriptions">
            <summary>
              Looks up a localized string similar to The SortDescriptions collection cannot be changed while SortDescriptors changes are propagated to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotChangeSortDescriptors">
            <summary>
              Looks up a localized string similar to The SortDescriptors collection cannot be changed while SortDescriptions changes are propagated to it..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotEvaluateFilter">
            <summary>
              Looks up a localized string similar to A FilterDescriptor with its PropertyPath equal to &apos;{0}&apos; cannot be evaluated..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.CannotInitializeParameter">
            <summary>
              Looks up a localized string similar to An exception occurred during the parameter&apos;s initialization: {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DescriptorPropertyPathIsNull">
            <summary>
              Looks up a localized string similar to Cannot use a {0} with a null or empty PropertyPath property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.DomainContextAlreadySet">
            <summary>
              Looks up a localized string similar to The DomainContext property can only be set once..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.EntityQueryMethodHasMismatchedArguments">
            <summary>
              Looks up a localized string similar to The {0} method does not have arguments that match the QueryParameters collection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.FilterDescriptorValueIsNull">
            <summary>
              Looks up a localized string similar to Cannot use a FilterDescriptor with a null Value property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidOperationDuringDataLoad">
            <summary>
              Looks up a localized string similar to This operation is not supported during a data loading operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to The {0} time span must be {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ItemMustDeriveFromEntity">
            <summary>
              Looks up a localized string similar to The provided item must derive from Entity..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.LoadOperation">
            <summary>
              Looks up a localized string similar to load.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.MemberNotFound">
            <summary>
              Looks up a localized string similar to The type {0} does not expose {1} called &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Method">
            <summary>
              Looks up a localized string similar to a method.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.MultipleEntityListMembers">
            <summary>
              Looks up a localized string similar to The DomainContext value cannot have more than one public property of type EntityList&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.NoEntityListMember">
            <summary>
              Looks up a localized string similar to The DomainContext value must have a public property of type EntityList&lt;{0}&gt;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationAlreadyInProgress">
            <summary>
              Looks up a localized string similar to A {0} operation is already in progress on this DomainDataSource..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationNeedsPropertiesSet">
            <summary>
              Looks up a localized string similar to The DomainDataSource&apos;s DomainContext and QueryName properties need to be set first..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.OperationNeedsPropertySet">
            <summary>
              Looks up a localized string similar to The {0} property needs to be set for {1} operations to succeed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.Positive">
            <summary>
              Looks up a localized string similar to positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.QueryParameterNameIsEmpty">
            <summary>
              Looks up a localized string similar to The provided query parameter cannot be used because it has an empty ParameterName property..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ReadableProperty">
            <summary>
              Looks up a localized string similar to a readable property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.RejectChangesOperation">
            <summary>
              Looks up a localized string similar to change reverting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.StrictlyPositive">
            <summary>
              Looks up a localized string similar to strictly positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.SubmitOperation">
            <summary>
              Looks up a localized string similar to submit.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainDataSourceResources.ValueMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ParameterErrorEventArgs">
            <summary>
            EventArgs for the ParameterError event raised when a parameter caused an exception
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ParameterErrorEventArgs.#ctor(System.Exception,System.Windows.Data.Parameter)">
            <summary>
            Internal ParameterErrorEventArgs constructor
            </summary>
            <param name="exception">Exception that occurred</param>
            <param name="parameter">Parameter that caused the exception</param>
        </member>
        <member name="P:System.Windows.Controls.ParameterErrorEventArgs.Exception">
            <summary>
            Gets the exception raised by the parameter
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ParameterErrorEventArgs.Parameter">
            <summary>
            Gets the Parameter that caused the exception
            </summary>
        </member>
        <member name="T:System.Windows.Data.ControlParameter">
            <summary>
            Special kind of parameter that can get its value from an input control
            </summary>
        </member>
        <member name="T:System.Windows.Data.Parameter">
            <summary>
            Base class for load, sort, filter and group parameters
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.#ctor">
            <summary>
            Default Parameter constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.GetConvertedValue(System.Type)">
            <summary>
            Returns the converted version of the Value property according to the culture provided 
            in the Initialize method call and the convertedValueType parameter.
            </summary>
            <param name="convertedValueType">Target type for the conversion from the Value to the converted value.</param>
            <returns>Converted version of the Value property</returns>
        </member>
        <member name="M:System.Windows.Data.Parameter.Initialize(System.Windows.FrameworkElement,System.Globalization.CultureInfo)">
            <summary>
            Called by the component that owns this Parameter instance to 
            provide a context for its usage.
            </summary>
            <param name="elementContext">FrameworkElement that provides a context for this Parameter usage</param>
            <param name="culture">CultureInfo used for comparisons and conversions</param>
        </member>
        <member name="M:System.Windows.Data.Parameter.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="M:System.Windows.Data.Parameter.ResetValueSnapshot">
            <summary>
            Resets the HasValueSnapshot property to false and the ValueSnapshot property to null.
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.RestoreValueSnapshot">
            <summary>
            Restores the Value property based on the snapshot created during the last SnapshotCurrentValue() call.
            </summary>
        </member>
        <member name="M:System.Windows.Data.Parameter.SnapshotCurrentValue">
            <summary>
            Creates a snapshot of the current Value property for future restoration.
            </summary>
        </member>
        <member name="E:System.Windows.Data.Parameter.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.HasValueSnapshot">
            <summary>
            Determines whether the Parameter has a Value snapshot created by a call to SnapshotCurrentValue().
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this Parameter was initialized with a non-null
            context element.
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter
            </summary>
        </member>
        <member name="P:System.Windows.Data.Parameter.ValueSnapshot">
            <summary>
            Gets the value saved by the last call to SnapshotCurrentValue()
            </summary>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.FindControl(System.Windows.FrameworkElement,System.String)">
            <summary>
            Tries to locate the input control given the context element and a name.
            </summary>
            <param name="elementContext">Context element</param>
            <param name="controlName">Control name to look for</param>
            <returns>Potential control found</returns>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.System#Windows#Common#IGeneralEventHandler#HandleGeneralEvent(System.Object,System.EventArgs,System.String)">
            <summary>
            Called when the RefreshEventName event is raised by the control
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> arguments.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.EnsureControl(System.Boolean)">
            <summary>
            Tries to locate the associated input control if 
            it was not found yet. Update the Value property
            if the control is found.
            </summary>
            <param name="force">Indicates whether the control should be located even when one was previously found.</param>
            <returns>True when this method tried to locate the input control. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.GetConvertedValue(System.Type)">
            <summary>
            Returns the converted version of the Value property according to the culture provided in the Initialize method call,
            the Converter and ConverterParameter properties, and the convertedValueType parameter.
            </summary>
            <param name="convertedValueType">Target type for the conversion from the Value to the converted value.</param>
            <returns>Converted version of the Value property</returns>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.Initialize(System.Windows.FrameworkElement,System.Globalization.CultureInfo)">
            <summary>
            Called by the component that owns this ControlParameter instance 
            to provide a context for its usage.
            </summary>
            <param name="elementContext">FrameworkElement that provides a context for this ControlParameter usage</param>
            <param name="culture">CultureInfo used for comparisons and conversions</param>
        </member>
        <member name="M:System.Windows.Data.ControlParameter.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a parameter property changed.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> arguments.</param>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.ControlName">
            <summary>
            Gets or sets the name of the control that holds the value
            </summary>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.Converter">
            <summary>
            Gets or sets an IValueConverter implementation to convert the control's PropertyName
            property before it gets exposed as the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.ConverterParameter">
            <summary>
            Gets or sets a parameter to be provided to the Converter used to convert the control's PropertyName property.
            </summary>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.PropertyName">
            <summary>
            Gets or sets the property name on the control that holds the value
            </summary>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.RefreshEventName">
            <summary>
            Gets or sets the event name on the control that should trigger a refresh of the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Data.ControlParameter.Value">
            <summary>
            Gets or sets the value of the parameter
            </summary>        
        </member>
        <member name="T:System.Windows.Data.FilterDescriptor">
            <summary>
            Class representing a filter description
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.#ctor">
            <summary>
            Default parameterless FilterDescriptor constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.#ctor(System.String,System.Windows.Data.FilterOperator,System.Object)">
            <summary>
            Constructor that creates a <see cref="T:System.Windows.Data.Parameter"/> instance and sets its
            <see cref="P:System.Windows.Data.Parameter.Value"/> property to the provided <paramref name="filterValue"/>.
            </summary>
            <param name="propertyPath">The path to be used for <see cref="P:System.Windows.Data.FilterDescriptor.PropertyPath"/>.</param>
            <param name="filterOperator">
            The <see cref="T:System.Windows.Data.FilterOperator"/> to be used for <see cref="P:System.Windows.Data.FilterDescriptor.Operator"/>.
            </param>
            <param name="filterValue">
            The value to be used by a new <see cref="T:System.Windows.Data.Parameter"/> instance.  Do not specify a
            <see cref="T:System.Windows.Data.Parameter"/>; just supply the value to be used.  A new <see cref="T:System.Windows.Data.Parameter"/>
            will be created, setting its <see cref="P:System.Windows.Data.Parameter.ParameterName"/> to <c>"Value"</c>
            and its <see cref="P:System.Windows.Data.Parameter.Value"/> to the <paramref name="filterValue"/> supplied.
            </param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.ResetStateSnapshot">
            <summary>
            Clears the state snapshot created during the last SnapshotCurrentState() call.
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.RestoreStateSnapshot">
            <summary>
            Restores the Operator and Value.Value properties based on the snapshot created during the last SnapshotCurrentState() call.
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptor.SnapshotCurrentState">
            <summary>
            Saves a snapshot of the current Operator and Value properties for future restoration.
            </summary>
        </member>
        <member name="E:System.Windows.Data.FilterDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.HasStateSnapshot">
            <summary>
            Determines whether the FilterDescriptor has a state snapshot created by a call to SnapshotCurrentState().
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.IgnoredValue">
            <summary>
            Gets or sets the value for the right operand that turns off this FilterDescriptor
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the FilterDescriptor is case sensitive for string values
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.Operator">
            <summary>
            Gets or sets the filter operator
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.PropertyPath">
            <summary>
            Gets or sets the name of the property path used as the left operand
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptor.Value">
            <summary>
            Gets or sets the right operand
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterDescriptorCollection">
            <summary>
            Collection of filter descriptions that raises notification for both collection
            and item changes
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.FilterDescriptor)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/>.</param>
            <param name="item">The <see cref="T:System.Windows.Data.FilterDescriptor"/> item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.FilterDescriptorCollection.SetItem(System.Int32,System.Windows.Data.FilterDescriptor)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index of the item to set.</param>
            <param name="item">The <see cref="T:System.Windows.Data.FilterDescriptor"/> item to set.</param>
        </member>
        <member name="E:System.Windows.Data.FilterDescriptorCollection.FilterChanged">
            <summary>
            Event raised whenever LogicalOperator value changes
            </summary>
        </member>
        <member name="P:System.Windows.Data.FilterDescriptorCollection.LogicalOperator">
            <summary>
            Gets or sets the logical operator for the filters collection: AND or OR
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterDescriptorLogicalOperator">
            <summary>
            Enumeration of logical operators for filter collections
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterDescriptorLogicalOperator.And">
            <summary>
            Filters are AND'ed
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterDescriptorLogicalOperator.Or">
            <summary>
            Filters are OR'ed
            </summary>
        </member>
        <member name="T:System.Windows.Data.FilterOperator">
            <summary>
            Operator used in FilterDescriptor class
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsLessThan">
            <summary>
            Left operand must be smaller than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsLessThanOrEqualTo">
            <summary>
            Left operand must be smaller than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsEqualTo">
            <summary>
            Left operand must be equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsNotEqualTo">
            <summary>
            Left operand must be different from the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsGreaterThanOrEqualTo">
            <summary>
            Left operand must be larger than the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsGreaterThan">
            <summary>
            Left operand must be larger than or equal to the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.StartsWith">
            <summary>
            Left operand must start with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.EndsWith">
            <summary>
            Left operand must end with the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.Contains">
            <summary>
            Left operand must contain the right one
            </summary>
        </member>
        <member name="F:System.Windows.Data.FilterOperator.IsContainedIn">
            <summary>
            Left operand must be contained in the right one
            </summary>
        </member>
        <member name="T:System.Windows.Data.GroupDescriptor">
            <summary>
            Describes a group criteria
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptor.#ctor">
            <summary>
            Initializes a new instance of the GroupDescriptor class.
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GroupDescriptor class.
            </summary>
            <param name="propertyPath">Populates the Value property of the underlying Parameter object</param>
        </member>
        <member name="E:System.Windows.Data.GroupDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.GroupDescriptor.PropertyExpression">
            <summary>
            Gets or sets a value for the PropertyExpression
            </summary>
        </member>
        <member name="P:System.Windows.Data.GroupDescriptor.PropertyPath">
            <summary>
            Gets or sets the public property used to group
            </summary>
        </member>
        <member name="T:System.Windows.Data.GroupDescriptorCollection">
            <summary>
            Collection of group descriptions that raises notification for both collection
            and item changes
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.GroupDescriptor)">
            <summary>
            Called by the base class when an item is inserted
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/>.</param>
            <param name="item">The <see cref="T:System.Windows.Data.GroupDescriptor"/> item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.GroupDescriptorCollection.SetItem(System.Int32,System.Windows.Data.GroupDescriptor)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index of the item to set.</param>
            <param name="item">The <see cref="T:System.Windows.Data.GroupDescriptor"/> item to set.</param>
        </member>
        <member name="T:System.Windows.Data.ParameterCollection">
            <summary>
            Class that represents a collection of Parameter objects
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.InsertItem(System.Int32,System.Windows.Data.Parameter)">
            <summary>
            Called by the base class when an item is inserted.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.ParameterCollection.SetItem(System.Int32,System.Windows.Data.Parameter)">
            <summary>
            Called by the base class when an item is replaced
            </summary>
            <param name="index">The index at which to set the item.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="T:System.Windows.Data.ParameterTypeConverter">
            <summary>
            Converts a String type to a Parameter type.
            </summary>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given
            type to the type of this converter
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">A type that represents the type that you want to convert from</param>
            <returns>
            true if sourceType is a String type or a Parameter type that can be
            assigned from sourceType; otherwise, false
            </returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a Parameter
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to use in the conversion</param>
            <param name="value">Object to convert into a Type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this type converter can convert to the specified destination type
            </summary>
            <param name="context">Conversion context</param>
            <param name="destinationType">Destination type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="M:System.Windows.Data.ParameterTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the provided value to the destination type
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to use in the conversion</param>
            <param name="value">Value to convert</param>
            <param name="destinationType">Destination type</param>
            <returns>Result of the conversion</returns>
        </member>
        <member name="T:System.Windows.Controls.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resources.ControlNotFound">
            <summary>
              Looks up a localized string similar to No control with the provided name &apos;{0}&apos; can be found..
            </summary>
        </member>
        <member name="T:System.Windows.Data.SortDirection">
            <summary>
            Enum describing the two possible sort directions.
            </summary>
        </member>
        <member name="F:System.Windows.Data.SortDirection.Ascending">
            <summary>
            Sort from smallest to largest value
            </summary>
        </member>
        <member name="F:System.Windows.Data.SortDirection.Descending">
            <summary>
            Sort from largest to smallest value
            </summary>
        </member>
        <member name="T:System.Windows.Data.SortDescriptor">
            <summary>
            Describes a sort criteria
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.#ctor">
            <summary>
            Default parameterless constructor
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.#ctor(System.String,System.Windows.Data.SortDirection)">
            <summary>
            Constructor that creates a Parameter instance and sets its
            Value property to the provided propertyPath.
            </summary>
            <param name="propertyPath">Populates the Value property of the underlying Parameter object</param>
            <param name="direction">Populates the Direction property</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.ResetStateSnapshot">
            <summary>
            Clears the state snapshot created during the last SnapshotCurrentState() call.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.RestoreStateSnapshot">
            <summary>
            Restores the Direction and PropertyPath properties based on the snapshot created during the last SnapshotCurrentState() call.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptor.SnapshotCurrentState">
            <summary>
            Creates a snapshot of the current Direction and PropertyPath properties for future restoration.
            </summary>
        </member>
        <member name="E:System.Windows.Data.SortDescriptor.PropertyChanged">
            <summary>
            INotifyPropertyChange's event
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.Direction">
            <summary>
            Gets or sets the sort direction: Ascending or Descending
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.HasStateSnapshot">
            <summary>
            Determines whether the SortDescriptor has a state snapshot created by a call to SnapshotCurrentState().
            </summary>
        </member>
        <member name="P:System.Windows.Data.SortDescriptor.PropertyPath">
            <summary>
            Gets or sets the public property used to sort
            </summary>
        </member>
        <member name="T:System.Windows.Data.SortDescriptorCollection">
            <summary>
            Collection of sort descriptions that raises notification for both collection
            and item changes.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.ClearItems">
            <summary>
            Called by the base class when all items are cleared.
            </summary>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.InsertItem(System.Int32,System.Windows.Data.SortDescriptor)">
            <summary>
            Called by the base class when an item is inserted.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.RemoveItem(System.Int32)">
            <summary>
            Called by the base class when an item is removed.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Windows.Data.SortDescriptorCollection.SetItem(System.Int32,System.Windows.Data.SortDescriptor)">
            <summary>
            Called by the base class when an item is replaced.
            </summary>
            <param name="index">The index to set.</param>
            <param name="item">The item to set.</param>
        </member>
        <member name="T:System.Windows.Controls.SubmittedChangesEventArgs">
            <summary>
            Event arguments for a completed submit operation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.SubmittedChangesEventArgs.#ctor(System.Windows.Ria.Data.EntityChangeSet,System.Collections.Generic.IEnumerable{System.Windows.Ria.Data.Entity},System.Exception,System.Boolean,System.Object)">
            <summary>
            Public constructor
            </summary>
            <param name="changeSet">The changeset that was submitted.</param>
            <param name="entitiesInError">The list of entities that were in error.</param>
            <param name="error">Exception for the submit operation if it failed.</param>
            <param name="canceled">True if the submit operation was canceled, false otherwise.</param>
            <param name="userState">Optional user state.</param>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.ChangeSet">
            <summary>
            Gets the <see cref="T:System.Windows.Ria.Data.EntityChangeSet"/> that was submitted
            </summary>
        </member>
        <member name="P:System.Windows.Controls.SubmittedChangesEventArgs.EntitiesInError">
            <summary>
            Gets the entities that caused the submit operation to fail.
            </summary>
        </member>
    </members>
</doc>
