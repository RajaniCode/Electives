//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilverlightApplication1
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web.Ria.Data;
    using System.Windows.Ria.Data;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class RiaContext : System.Windows.Ria.RiaContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the RiaContext class.
        /// </summary>
        public RiaContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="Application.ApplicationLifetimeObjects"/>
        public new static RiaContext Current
        {
            get
            {
                return ((RiaContext)(System.Windows.Ria.RiaContextBase.Current));
            }
        }
    }
}
namespace SilverlightApplication1.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Web.Ria.Data;
    using System.Windows.Ria.Data;
    
    
    public sealed partial class MyNoteContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public MyNoteContext() : 
                this(new HttpDomainClient(new Uri("DataService.axd/SilverlightApplication1-Web-MyNoteService/", System.UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The MyNoteService data service URI.
        /// </param>
        public MyNoteContext(Uri serviceUri) : 
                this(new HttpDomainClient(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public MyNoteContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntityList<Note> Notes
        {
            get
            {
                return base.Entities.GetEntityList<Note>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetNotes'.
        /// </summary>
        public EntityQuery<Note> GetNotesQuery()
        {
            return base.CreateQuery<Note>("GetNotes", null, false, true);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new MyNoteContextEntityContainer();
        }
        
        internal sealed class MyNoteContextEntityContainer : EntityContainer
        {
            
            public MyNoteContextEntityContainer()
            {
                this.CreateEntityList<Note>(EntityListOperations.All);
            }
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication1.Web")]
    public sealed partial class Note : Entity
    {
        
        private string _entry;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEntryChanging(string value);
        partial void OnEntryChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Note()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        [StringLength(500)]
        public string Entry
        {
            get
            {
                return this._entry;
            }
            set
            {
                if ((this._entry != value))
                {
                    this.ValidateProperty("Entry", value);
                    this.OnEntryChanging(value);
                    this.RaiseDataMemberChanging("Entry");
                    this._entry = value;
                    this.RaiseDataMemberChanged("Entry");
                    this.OnEntryChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.ValidateProperty("ID", value);
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
