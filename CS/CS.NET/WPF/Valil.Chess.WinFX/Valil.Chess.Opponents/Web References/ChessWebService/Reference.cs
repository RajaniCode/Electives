//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50215.44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50215.44.
// 
namespace Valil.Chess.Opponents.ChessWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://www.valil.com/ChessWebService")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetNextMoveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = Valil.Chess.Opponents.Properties.Settings.Default.Valil_Chess_Opponents_ChessWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetNextMoveCompletedEventHandler GetNextMoveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.valil.com/ChessWebService/GetNextMove", RequestNamespace="http://www.valil.com/ChessWebService", ResponseNamespace="http://www.valil.com/ChessWebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextMove(string boardFEN, string repetitiveMoveCAN, int searchDepth) {
            object[] results = this.Invoke("GetNextMove", new object[] {
                        boardFEN,
                        repetitiveMoveCAN,
                        searchDepth});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextMoveAsync(string boardFEN, string repetitiveMoveCAN, int searchDepth) {
            this.GetNextMoveAsync(boardFEN, repetitiveMoveCAN, searchDepth, null);
        }
        
        /// <remarks/>
        public void GetNextMoveAsync(string boardFEN, string repetitiveMoveCAN, int searchDepth, object userState) {
            if ((this.GetNextMoveOperationCompleted == null)) {
                this.GetNextMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextMoveOperationCompleted);
            }
            this.InvokeAsync("GetNextMove", new object[] {
                        boardFEN,
                        repetitiveMoveCAN,
                        searchDepth}, this.GetNextMoveOperationCompleted, userState);
        }
        
        private void OnGetNextMoveOperationCompleted(object arg) {
            if ((this.GetNextMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextMoveCompleted(this, new GetNextMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if ((((wsUri.Port >= 1024) 
                        && (wsUri.Port <= 5000)) 
                        && (string.Compare(wsUri.Host, "localHost", true) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    public delegate void GetNextMoveCompletedEventHandler(object sender, GetNextMoveCompletedEventArgs e);
    
    /// <remarks/>
    public partial class GetNextMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
