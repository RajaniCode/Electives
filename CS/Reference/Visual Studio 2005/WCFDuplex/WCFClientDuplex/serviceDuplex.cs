//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.ServiceModel.ServiceContractAttribute(Namespace="http://WCFSampleDuplex", CallbackContract=typeof(InterfaceDuplexCallback))]
public interface InterfaceDuplex
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://WCFSampleDuplex/InterfaceDuplex/doHugeTask")]
    void doHugeTask();
}

public interface InterfaceDuplexCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://WCFSampleDuplex/InterfaceDuplex/Completed")]
    void Completed();
}

public interface InterfaceDuplexChannel : InterfaceDuplex, System.ServiceModel.IClientChannel
{
}

public partial class InterfaceDuplexProxy : System.ServiceModel.DuplexClientBase<InterfaceDuplex>, InterfaceDuplex
{
    
    public InterfaceDuplexProxy(System.ServiceModel.InstanceContext inputInstance) : 
            base(inputInstance)
    {
    }
    
    public InterfaceDuplexProxy(System.ServiceModel.InstanceContext inputInstance, string endpointConfigurationName) : 
            base(inputInstance, endpointConfigurationName)
    {
    }
    
    public InterfaceDuplexProxy(System.ServiceModel.InstanceContext inputInstance, string endpointConfigurationName, string remoteAddress) : 
            base(inputInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceDuplexProxy(System.ServiceModel.InstanceContext inputInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(inputInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceDuplexProxy(System.ServiceModel.InstanceContext inputInstance, System.ServiceModel.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(inputInstance, binding, remoteAddress)
    {
    }
    
    public void doHugeTask()
    {
        base.InnerProxy.doHugeTask();
    }
}
