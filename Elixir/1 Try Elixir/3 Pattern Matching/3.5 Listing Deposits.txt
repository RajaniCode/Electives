3.5 Listing Deposits

The Account.list_deposits function below prints a list of deposits passed as an argument. When called with just the list of deposits as its only argument, it should sort the deposits in ascending order. There is a second version of the list_deposits function, with two clauses which take the sorting order as the second argument. This second argument is an atom that can be either :asc or :desc. Complete the following code so that it prints the expected result.

account.exs

defmodule Account do
  def list_deposits(deposits) do
    list_deposits(deposits,    )
  end

  def list_deposits(deposits, :asc) do
    sort_asc(deposits) |> list
  end

  def list_deposits(deposits, :desc) do
    
  end

  def sort_desc(deposits) do
    Enum.sort(deposits, &(&1 > &2))
  end

  def sort_asc(deposits) do
    Enum.sort(deposits, &(&1 < &2))
  end

  def list(sorted_deposits) do
    IO.inspect Enum.map(sorted_deposits, &("US$#{&1}"))
  end
end

Account.list_deposits([9.50,5.0,13.0,3.0,1.0])


1. In the body of the list_deposits(deposits) function, finish the code so that it calls the clause of list_deposits which takes :asc as its second argument.

Answer:
account.exs

defmodule Account do
  def list_deposits(deposits) do
    list_deposits(deposits, :asc)
  end

  def list_deposits(deposits, :asc) do
    sort_asc(deposits) |> list
  end

  def list_deposits(deposits, :desc) do
    
  end

  def sort_desc(deposits) do
    Enum.sort(deposits, &(&1 > &2))
  end

  def sort_asc(deposits) do
    Enum.sort(deposits, &(&1 < &2))
  end

  def list(sorted_deposits) do
    IO.inspect Enum.map(sorted_deposits, &("US$#{&1}"))
  end
end

Account.list_deposits([9.50,5.0,13.0,3.0,1.0])

2. In the body of the list_deposits(deposits, :desc) function, call the sort_desc function with deposits as its argument. Then, using the pipe operator, pass the result of this function call as the argument to the list function.

Answer:
account.exs

defmodule Account do
  def list_deposits(deposits) do
    list_deposits(deposits, :asc)
  end

  def list_deposits(deposits, :asc) do
    sort_asc(deposits) |> list
  end

  def list_deposits(deposits, :desc) do
    sort_desc(deposits) |> list
  end

  def sort_desc(deposits) do
    Enum.sort(deposits, &(&1 > &2))
  end

  def sort_asc(deposits) do
    Enum.sort(deposits, &(&1 < &2))
  end

  def list(sorted_deposits) do
    IO.inspect Enum.map(sorted_deposits, &("US$#{&1}"))
  end
end

Account.list_deposits([9.50,5.0,13.0,3.0,1.0])
