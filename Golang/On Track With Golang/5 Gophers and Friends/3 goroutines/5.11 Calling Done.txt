5.11 Calling Done

We need to make some final changes to chat/lib/main.go so the Notify() methods can run inside a goroutine. We’ve already updated the notifier interface to accept an argument of type pointer, but there’s a couple of things left to do.

chat/httpService/main.go
package httpService

import (
  "fmt"
  "time"
)

func SendNotification() {
  time.Sleep(5 * time.Second)
  fmt.Println("Notification sent")
}

chat/main.go
package main

import (
  "chat/lib"
  "sync"
)

func main() {
  var wg sync.WaitGroup

  connections := lib.GetAllConnections()
  connectionCount := len(connections)

  wg.Add(connectionCount)

  for _, c := range connections {
    go c.Notify(&wg)
  }

  wg.Wait()
}


chat/lib/main.go
package lib

import (
  "chat/httpService"
  "sync"
  "time"
)

type guestConnection struct {
  ip       string
  userName string
  isAdmin  bool
}

type visitorConnection struct {
  ip       string
  connHour int
}

type notifier interface {
  Notify(*sync.WaitGroup)
}

func (g guestConnection) Notify(  ) {
  httpService.SendNotification()
  wg.Done()
}

func (v visitorConnection) Notify(wg *sync.WaitGroup) {
  httpService.SendNotification()
  
}

func GetAllConnections() []notifier {
  gConn := &guestConnection{ip: "192.168.0.10", userName: "Darth Vader"}
  vConn := &visitorConnection{ip: "192.168.0.11", connHour: time.Now().Hour()}

  return []notifier{gConn, vConn}
}


1. Update the implementation of the Notify() method so guestConnection can accept the proper argument.

Answer:
chat/lib/main.go
package lib

import (
  "chat/httpService"
  "sync"
  "time"
)

type guestConnection struct {
  ip       string
  userName string
  isAdmin  bool
}

type visitorConnection struct {
  ip       string
  connHour int
}

type notifier interface {
  Notify(*sync.WaitGroup)
}

func (g guestConnection) Notify(wg *sync.WaitGroup) {
  httpService.SendNotification()
  wg.Done()
}

func (v visitorConnection) Notify(wg *sync.WaitGroup) {
  httpService.SendNotification()
  
}

func GetAllConnections() []notifier {
  gConn := &guestConnection{ip: "192.168.0.10", userName: "Darth Vader"}
  vConn := &visitorConnection{ip: "192.168.0.11", connHour: time.Now().Hour()}

  return []notifier{gConn, vConn}
}

2. Now update the Notify() method for visitorConnection so that it informs the WaitGroup once it's done executing from a goroutine.

Answer:
chat/lib/main.go
package lib

import (
  "chat/httpService"
  "sync"
  "time"
)

type guestConnection struct {
  ip       string
  userName string
  isAdmin  bool
}

type visitorConnection struct {
  ip       string
  connHour int
}

type notifier interface {
  Notify(*sync.WaitGroup)
}

func (g guestConnection) Notify(wg *sync.WaitGroup) {
  httpService.SendNotification()
  wg.Done()
}

func (v visitorConnection) Notify(wg *sync.WaitGroup) {
  httpService.SendNotification()
  wg.Done()
}

func GetAllConnections() []notifier {
  gConn := &guestConnection{ip: "192.168.0.10", userName: "Darth Vader"}
  vConn := &visitorConnection{ip: "192.168.0.11", connHour: time.Now().Hour()}

  return []notifier{gConn, vConn}
}