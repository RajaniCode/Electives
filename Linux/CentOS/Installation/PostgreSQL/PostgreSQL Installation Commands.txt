
1. Installing the required/optional packages:

Note: Please check whether to install the following as it needs to be verified
yum install gcc make kernel-devel perl-ExtUtils-MakeMaker perl-ExtUtils-Embed readline-devel zlib-devel openssl-devel pam-devel libxml2-devel openldap-devel tcl-devel python-devel flex bison

2. Download the source code from command line: (PostgreSQL-9.5.3 is the current stable version at the time of writing this)

wget http://ftp.postgresql.org/pub/source/v9.5.3/postgresql-9.5.3.tar.gz

3. Creating the "postgres" user:
It is always a good idea to create a PostgreSQL superuser to own and manage the PostgreSQL database files rather than using "root" account as the PostgreSQL superuser because of security purposes. This user can be named anything and I named it "posrgres":

su -     --> switch to root account 

useradd postgres
passwd postgres 
Note Password: centos7

#Note Unpacked to /opt contrary to /usr/local/src stated in the blog
4. Unpack the Postgresql source package to /opt:

tar -xzvf postgresql-9.5.3.tar.gz -C /opt

cd /opt

5. Grant the ownership of the Postgresql source directory to "postgres" user. It enables you to compile PostgreSQL as the "postgres" user.

chown -R postgres.postgres /opt/postgresql-9.5.3

6. Configuring the source.Now, switch to postgresql-9.5.3 directory:

cd postgresql-9.5.3

./configure --help

See all available options to customize your PostgreSQL

It's pretty self explanatory. For our purpose, I am going to use the options below and leave other options as default:

./configure --mandir=/usr/local/pgsql/man --with-tcl --with-perl --with-python --with-pam --with-ldap --with-openssl --with-libxml

which
--mandir=DIR     is       man documentation [DATAROOTDIR/man]
--with-tcl             is       build Tcl modules (PL/Tcl); if you plan to use pl/Tcl procedural language
--with-perl           is       build Perl modules (PL/Perl); if you plan to use pl/Perl procedural language
--with-python      is       build Python modules (PL/Python); if you plan to use pl/Python procedural language
--with-pam          is       build with PAM support
--with-ldap          is       build with LDAP support
--with-openssl     is       build with OpenSSL support
--with-libxml      is       build with XML support

7. Now, run the "make" command after switching to "postgres" user:

su postgres

make

After compiling source, you should see the following message:
"All of PostgreSQL successfully made. Ready to install."

8. We need to do regression test. This is optional but really recommended it.

make check

9. Now, you need to install compiled programs and libraries and "su -" command save your time to log in as root user for command's execution:

su -c "make install"

Password: [Note: su root password]

Don't forget to change the owner of PostgreSQL installation directory, in this case /usr/local/pgsql, to "postgres" user:

su -c "chown -R postgres.postgres /usr/local/pgsql"

Password: [Note: su root password]

10. Then, install documentation:

su -c "make install-docs"

Password: [Note: su root password]

11. Next, we need to set environment variables. I am going to set environment variables for man page and bin directory. In order to do that, add the following lines to the end of /etc/profile

su root

Password: [Note: su root password]

echo 'PATH=$PATH:/usr/local/pgsql/bin' >> /etc/profile
echo 'MANPATH=$MANPATH:/usr/local/pgsql/bin' >> /etc/profile
echo 'export PATH MANPATH' >> /etc/profile

Don't forget to log out and log in again to take effect the new variables.

su postgres

Now try "man psql"

su root

Password: [Note: su root password]

Now try "man psql"

12. Now, we need to initialize and start PostgreSQL. Make sure you logged in as postgres user. Then run the following command:

su postgres

/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data

The path after the -D option is up to you. You can put any path BUT make sure on that path the user "postgres" has write access on it.

13. To start the database server in the background, run the following command:

/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l /tmp/logfile-pgsql.log start

to make sure that server is running, use the following commands:

cat /tmp/logfile-pgsql.log

netstat -antp

14. Next, we need to configure PostgreSQL in SysV Script so that we can gracefully control PostgreSQL database though the use of SysV runlevel system. In order to do that, we need to copy a script called "linux" to init.d directory. I also renamed it to "postgresql" to be more meaningful. Run the following commands:

su -c "cp /opt/postgresql-9.5.3/contrib/start-scripts/linux /etc/rc.d/init.d/postgresql"

Password: [Note: su root password]

Make the script executable

su -c "chmod a+x /etc/rc.d/init.d/postgresql"

Password: [Note: su root password]

If you wish for the script to startup PostgreSQL automatically when the machine boots up, run the following command:

su -c "chkconfig --add postgresql"

Password: [Note: su root password]

Now, to start and stop PostgreSQL, run the following commands:

service postgresql stop

Stopping PostgreSQL: Password: [Note: postgres password]

service postgresql start 

[Note: postgres password]

service postgresql status

Password: [Note: postgres password]

15. Let's create a test database, we need it when we want to try to connect from client side(another machine) to database server:

createdb testdb
psql testdb
